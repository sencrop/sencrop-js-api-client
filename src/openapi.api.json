{
  "paths": {
    "/organisations/{organisationId}/chargebeeId": {
      "delete": {
        "operationId": "deleteOrganisationChargebeeId",
        "summary": "Remove chargebeeId from the organisation.",
        "tags": [
          "organisations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "The organisation's chargebeeId was successfully deleted."
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "postOrganisationChargebeeId",
        "summary": "Add chargebeeId for an organisation.",
        "tags": [
          "organisations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "Add chargebee id payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "chargebeeId"
                ],
                "additionalProperties": false,
                "properties": {
                  "chargebeeId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Chargebee id has been added and plan will be synced."
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/devices/{deviceId}": {
      "delete": {
        "operationId": "deleteOrganisationDevice",
        "summary": "Delete an organisation's device access.",
        "tags": [
          "devices"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "The organisation's device access was successfully deleted."
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getOrganisationDevice",
        "summary": "Get a current organisation's device.",
        "tags": [
          "devices",
          "partnerAccess"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested current organisation's device",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesItems"
                }
              }
            }
          },
          "404": {
            "description": "User or device does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putOrganisationDevice",
        "summary": "Update an organisation's device.",
        "tags": [
          "devices"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The organisation's device",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": 1664,
                "identification": "RC000086",
                "modelId": 7,
                "organisationId": 1,
                "city": "Lille",
                "position": {
                  "latitude": 52.7552,
                  "longitude": 4.96973,
                  "altitude": 42,
                  "precision": 0,
                  "satellites": 7
                },
                "status": {
                  "firmware": "0.2.51",
                  "battery": 3520,
                  "signal": 41.57,
                  "lastLocationDate": "2019-04-11T00:01:35.000Z",
                  "lastRebootDate": "2019-04-05T03:37:08.000Z",
                  "lastMoveDate": "2019-04-10T15:07:34.000Z",
                  "lastStatusUpdateDate": "2019-04-19T06:38:00.000Z"
                },
                "accessPeriods": [
                  {
                    "id": 16641664,
                    "authorId": 1,
                    "granteeId": 1,
                    "sharingOrganisationId": 3,
                    "delegatorId": 4,
                    "organisationId": 1,
                    "parameters": {},
                    "type": "guest",
                    "startDate": "2019-03-20T06:27:44.000Z",
                    "endDate": "2019-04-04T07:08:12.000Z"
                  }
                ],
                "settings": {
                  "patchSmallRainFall": true
                },
                "calibrations": [],
                "serial": "740101",
                "contents": {
                  "name": "MIR"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Device"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organisation's device were sucessfully updated",
            "content": {
              "application/json": {
                "example": {
                  "item": 1664,
                  "devices": {
                    "1664": {
                      "id": 1664,
                      "identification": "RC000086",
                      "modelId": 7,
                      "organisationId": 1,
                      "city": "Lille",
                      "position": {
                        "latitude": 52.7552,
                        "longitude": 4.96973,
                        "altitude": 42,
                        "precision": 0,
                        "satellites": 7
                      },
                      "status": {
                        "firmware": "0.2.51",
                        "battery": 3520,
                        "signal": 41.57,
                        "lastLocationDate": "2019-04-11T00:01:35.000Z",
                        "lastRebootDate": "2019-04-05T03:37:08.000Z",
                        "lastMoveDate": "2019-04-10T15:07:34.000Z",
                        "lastStatusUpdateDate": "2019-04-19T06:38:00.000Z"
                      },
                      "accessPeriods": [
                        {
                          "id": 16641664,
                          "authorId": 1,
                          "granteeId": 1,
                          "sharingOrganisationId": 3,
                          "delegatorId": 4,
                          "organisationId": 1,
                          "parameters": {},
                          "type": "guest",
                          "startDate": "2019-03-20T06:27:44.000Z",
                          "endDate": "2019-04-04T07:08:12.000Z"
                        }
                      ],
                      "settings": {
                        "patchSmallRainFall": true
                      },
                      "calibrations": [],
                      "serial": "740101",
                      "contents": {
                        "name": "MIR"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DeviceItem"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/networks/{networkId}/devices/{deviceId}": {
      "delete": {
        "operationId": "deleteOrganisationNetworkDeviceAccess",
        "summary": "Delete an organisation's network device access.",
        "tags": [
          "devices"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "The organisation's network device access was successfully deleted."
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putOrganisationNetworkDeviceAccess",
        "summary": "Update an organisation's device.",
        "tags": [
          "networks"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "201": {
            "description": "Organisation's device were sucessfully updated"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/aggregations/{aggregationId}": {
      "delete": {
        "operationId": "deleteUserOrganisationAggregation",
        "summary": "Delete a user's aggregation.",
        "tags": [
          "aggregations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/aggregationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "The user's aggregation were successfully deleted."
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putUserOrganisationAggregation",
        "summary": "Upsert an organisation's aggregation.",
        "tags": [
          "aggregations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/aggregationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The organisation's aggregation to upsert",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Aggregation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully upserted the organisation's aggregation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregationItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad aggregation contents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}": {
      "delete": {
        "operationId": "deleteUserOrganisationAlert",
        "summary": "Delete a user's alert.",
        "tags": [
          "alerts"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/alertId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "The user's alert were successfully deleted."
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putUserOrganisationAlert",
        "summary": "Update an organisation's alert.",
        "tags": [
          "alerts"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/alertId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The organisation's alert to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Alert"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully updated the organisation's alert",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertItem"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/devices/{deviceId}/modules/{moduleId}": {
      "delete": {
        "operationId": "deleteUserOrganisationDeviceModule",
        "summary": "Disable a module for a user's organisations's device",
        "tags": [
          "devices",
          "modules"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "$ref": "#/components/parameters/moduleId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "Module sucessfully disabled for the user's organisations's device"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putUserOrganisationDeviceModule",
        "summary": "Add a module to a user's organisations's device",
        "tags": [
          "devices",
          "modules"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "$ref": "#/components/parameters/moduleId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The module settings",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "description": "Arvalis Mileos parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code",
                      "id"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "mileos"
                        ]
                      },
                      "id": {
                        "type": "number"
                      }
                    }
                  },
                  {
                    "description": "Syngenta Avisio parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code",
                      "organisationName"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "avisio"
                        ]
                      },
                      "organisationName": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "description": "Bayer Movida parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code",
                      "id",
                      "administrator",
                      "organisationName"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "movida"
                        ]
                      },
                      "administrator": {
                        "type": "string"
                      },
                      "organisationName": {
                        "type": "string"
                      },
                      "id": {
                        "type": "number"
                      }
                    }
                  },
                  {
                    "description": "BASF Atlas parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code",
                      "siret"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "atlas"
                        ]
                      },
                      "siret": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "description": "ScanBean parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code",
                      "siret",
                      "organisationName"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "scanbean"
                        ]
                      },
                      "siret": {
                        "type": "string"
                      },
                      "organisationName": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "description": "Vintel parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "vintel"
                        ]
                      }
                    }
                  },
                  {
                    "description": "VitiMeteo parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "vitimeteo"
                        ]
                      }
                    }
                  },
                  {
                    "description": "Agrovision parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "agrovision"
                        ]
                      }
                    }
                  },
                  {
                    "description": "Corhize parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "corhize"
                        ]
                      }
                    }
                  },
                  {
                    "description": "Fruition parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "fruition"
                        ]
                      }
                    }
                  },
                  {
                    "description": "PCA parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "pca"
                        ]
                      }
                    }
                  },
                  {
                    "description": "NIAB parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "niab"
                        ]
                      }
                    }
                  },
                  {
                    "description": "Decitrait parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "decitrait"
                        ]
                      }
                    }
                  },
                  {
                    "description": "Vigimap parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "vigimap"
                        ]
                      }
                    }
                  },
                  {
                    "description": "MyEasyFarm parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "enum": [
                          "myeasyfarm"
                        ]
                      }
                    }
                  },
                  {
                    "description": "Generic Module parameters",
                    "type": "object",
                    "additionalProperties": true,
                    "required": [
                      "code",
                      "externalIdentifier"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "pattern": "^[a-z0-9_]+$"
                      },
                      "externalIdentifier": {
                        "type": "string"
                      },
                      "organisationName": {
                        "type": "string"
                      },
                      "userEmail": {
                        "type": "string",
                        "format": "email"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Module sucessfully activated on the user's organisations's device"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/invitations/{invitationId}": {
      "delete": {
        "operationId": "deleteUserOrganisationInvitation",
        "summary": "Delete a user's organisation invitation.",
        "tags": [
          "invitations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/invitationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "The user's invitation were successfully deleted."
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putUserOrganisationInvitation",
        "summary": "Update an organisation's invitation.",
        "tags": [
          "invitations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/invitationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The organisation's invitation to update",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "abbacaca-abba-abba-caca",
                "organisationId": 1,
                "authordId": 1,
                "status": "pending",
                "completionDate": "2019-01-01T00:00:00Z",
                "creationDate": "2019-01-01T00:00:00Z",
                "modificationDate": "2019-01-01T00:00:00Z",
                "contents": {
                  "recipientId": 3,
                  "type": "share",
                  "data": {
                    "type": "select",
                    "message": "Here are the stations we talk about",
                    "transmittable": false,
                    "devicesIds": [
                      301,
                      404
                    ],
                    "allowedDevicesIds": [
                      301,
                      404,
                      500
                    ],
                    "maximumSharedAccesses": 2
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully updated the organisation's invitation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationItem"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/members/{memberId}": {
      "delete": {
        "operationId": "deleteUserOrganisationMember",
        "summary": "Delete a member from an user's organisation",
        "tags": [
          "organisations",
          "members"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/memberId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "The member was successfully deleted of the organisation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putUserOrganisationMember",
        "summary": "Add or edit an member to an organisation",
        "tags": [
          "organisations",
          "members"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/memberId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The type of relation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "owner",
                      "admin",
                      "collaborator"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user was successfully added to the organisation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/openNetworks/{networkId}": {
      "put": {
        "operationId": "putUserOrganisationOpenNetworkMembership",
        "summary": "Allow an organisation to join an open network",
        "tags": [
          "networks"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "201": {
            "description": "Open network membership upserted"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/shares/{shareId}": {
      "delete": {
        "operationId": "deleteUserOrganisationShare",
        "tags": [
          "shares"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/shareId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the share"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putUserOrganisationShare",
        "tags": [
          "shares"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/shareId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The share to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Shares"
              },
              "example": {
                "id": "1_2",
                "sharingOrganisationId": 1,
                "authorId": 3,
                "granteeId": 2,
                "creationDate": "2019-03-27T12:42:54.000Z",
                "lastModificationDate": "2019-03-27T12:42:54.000Z",
                "contents": {
                  "type": "select",
                  "recipientId": 4,
                  "message": "Here are the stations we talk about",
                  "transmittable": false,
                  "devicesIds": [
                    301,
                    404
                  ],
                  "allowedDevicesIds": [
                    301,
                    404,
                    500
                  ],
                  "maximumSharedAccesses": 2
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully upserted the share",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharesItem"
                },
                "example": {
                  "item": "1_2",
                  "shares": {
                    "1_2": {
                      "id": "1_2",
                      "sharingOrganisationId": 1,
                      "authorId": 3,
                      "granteeId": 2,
                      "creationDate": "2019-03-27T12:42:54.000Z",
                      "lastModificationDate": "2019-03-27T12:42:54.000Z",
                      "contents": {
                        "type": "select",
                        "recipientId": 4,
                        "message": "Here are the stations we talk about",
                        "transmittable": false,
                        "devicesIds": [
                          301,
                          404
                        ],
                        "allowedDevicesIds": [
                          301,
                          404,
                          500
                        ],
                        "maximumSharedAccesses": 2
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/openAPI": {
      "get": {
        "operationId": "getOpenAPI",
        "summary": "Get API documentation.",
        "tags": [
          "system"
        ],
        "security": [
          {
            "maybeBearerAuth": [
              "admin"
            ]
          },
          {
            "accessTokenAuth": [
              "admin"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "mutedParameters",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "mutedMethods",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "tags",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "authenticated",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Provides the private Open API documentation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/crops": {
      "get": {
        "operationId": "getCrops",
        "summary": "Get the crops",
        "tags": [
          "miscellaneous"
        ],
        "responses": {
          "200": {
            "description": "List of the crops",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CropsItems"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ]
      }
    },
    "/factory/sigfox/status/{serial}": {
      "get": {
        "operationId": "getFactorySigfoxStatus",
        "summary": "Get sigfox statuses for devices in production line tests",
        "tags": [
          "monitoring"
        ],
        "security": [
          {
            "bearerAuth": [
              "manufacturer"
            ]
          },
          {
            "accessTokenAuth": [
              "manufacturer"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serial",
            "required": true,
            "description": "Sigfox serial from a device",
            "schema": {
              "type": "string",
              "pattern": "^[A-F0-9]+$"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Devices measures and testing informations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "serial": {
                        "type": "string"
                      },
                      "measure": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "value": {
                        "type": "boolean"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error message",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/invitations/{invitationId}": {
      "get": {
        "operationId": "getInvitation",
        "summary": "Get an invitation.",
        "tags": [
          "invitations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/invitationId"
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The invitation",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-abba-abba-caca",
                  "invitations": {
                    "abbacaca-abba-abba-caca": {
                      "id": "abbacaca-abba-abba-caca",
                      "organisationId": 1,
                      "authordId": 1,
                      "status": "pending",
                      "completionDate": "2019-01-01T00:00:00Z",
                      "creationDate": "2019-01-01T00:00:00Z",
                      "modificationDate": "2019-01-01T00:00:00Z",
                      "contents": {
                        "recipientId": 3,
                        "type": "share",
                        "data": {
                          "type": "select",
                          "message": "Here are the stations we talk about",
                          "transmittable": false,
                          "devicesIds": [
                            301,
                            404
                          ],
                          "allowedDevicesIds": [
                            301,
                            404,
                            500
                          ],
                          "maximumSharedAccesses": 2
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/InvitationItem"
                }
              }
            }
          },
          "404": {
            "description": "The invitation does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/invitations/{invitationId}/devices/{deviceId}/liveAggregations": {
      "get": {
        "operationId": "getInvitationDeviceLiveAggregations",
        "summary": "Retrieve last measures for a given device from an invitation",
        "tags": [
          "invitations",
          "data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/invitationId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "in": "query",
            "required": true,
            "description": "The timezone of the data",
            "name": "timeZone",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z]+/[a-zA-Z]+|UTC|GMT$",
              "maxLength": 50
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "201": {
            "description": "The requested device's data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceLiveAggregationItems"
                },
                "example": {
                  "items": [
                    209,
                    2219,
                    5149
                  ],
                  "deviceLiveAggregations": {
                    "209": {
                      "RELATIVE_HUMIDITY_MEAN": {},
                      "WIND_SPEED_MEAN": {}
                    },
                    "2219": {
                      "RELATIVE_HUMIDITY_MEAN": {},
                      "WIND_SPEED_MEAN": {
                        "last_hour": 4.333333333333333,
                        "this_week": 10.102888086642599
                      }
                    },
                    "5149": {
                      "RELATIVE_HUMIDITY_MEAN": {
                        "last_hour": 76.55000000000001,
                        "this_week": 85.51822916666667
                      },
                      "WIND_SPEED_MEAN": {}
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/modules": {
      "get": {
        "operationId": "getModules",
        "summary": "Get the modules",
        "tags": [
          "modules",
          "partners"
        ],
        "responses": {
          "200": {
            "description": "List of the modules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleItems"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ]
      }
    },
    "/me": {
      "get": {
        "operationId": "getMySelf",
        "summary": "Redirect to the user profile.",
        "tags": [
          "users",
          "partnerAccess"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to the fully qualified profile path"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/networks/{networkId}": {
      "get": {
        "operationId": "getNetwork",
        "summary": "Get the network.",
        "tags": [
          "networks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/networkId"
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkItem"
                }
              }
            }
          },
          "404": {
            "description": "Network does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/networks/{networkId}/devices/{deviceId}/liveAggregations": {
      "get": {
        "operationId": "getNetworkDeviceLiveAggregations",
        "summary": "Retrieve last measures for a given device from a network",
        "tags": [
          "networks",
          "data"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/networkId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "in": "query",
            "required": true,
            "description": "The timezone of the data",
            "name": "timeZone",
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z]+/[a-zA-Z]+|UTC|GMT$",
              "maxLength": 50
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "201": {
            "description": "The requested device's data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceLiveAggregationItems"
                },
                "example": {
                  "items": [
                    209,
                    2219,
                    5149
                  ],
                  "deviceLiveAggregations": {
                    "209": {
                      "RELATIVE_HUMIDITY_MEAN": {},
                      "WIND_SPEED_MEAN": {}
                    },
                    "2219": {
                      "RELATIVE_HUMIDITY_MEAN": {},
                      "WIND_SPEED_MEAN": {
                        "last_hour": 4.333333333333333,
                        "this_week": 10.102888086642599
                      }
                    },
                    "5149": {
                      "RELATIVE_HUMIDITY_MEAN": {
                        "last_hour": 76.55000000000001,
                        "this_week": 85.51822916666667
                      },
                      "WIND_SPEED_MEAN": {}
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/networks/{networkId}/devices": {
      "get": {
        "operationId": "getNetworkDevices",
        "tags": [
          "devices",
          "networks"
        ],
        "summary": "Get devices for a network",
        "parameters": [
          {
            "$ref": "#/components/parameters/networkId"
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Devices for a network",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items",
                    "devices"
                  ],
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "pattern": "^[0-9]+$",
                        "minimum": 1
                      },
                      "minItems": 0,
                      "uniqueItems": true
                    },
                    "devices": {
                      "$ref": "#/components/schemas/GenericDeviceHash"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/oauth2/authorize": {
      "get": {
        "operationId": "getOAuth2Authorize",
        "summary": "Implements the [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1)\n as defined per the OAuth2 RFC.",
        "tags": [
          "oauth2"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "response_type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "code",
                "token"
              ]
            }
          },
          {
            "in": "query",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "redirect_uri",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "in": "query",
            "name": "scope",
            "description": "See https://tools.ietf.org/html/rfc6749#section-3.3",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "state",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects the user to the authorization interface."
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}": {
      "get": {
        "operationId": "getOrganisation",
        "summary": "Get the organisation.",
        "tags": [
          "organisations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The organisation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationItem"
                }
              }
            }
          },
          "404": {
            "description": "Organisation does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putOrganisation",
        "summary": "Update an organisation.",
        "tags": [
          "organisations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The modified organisation",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": 1,
                "ownersIds": [
                  2
                ],
                "isNetwork": false,
                "contents": {
                  "name": "Sencrop",
                  "locale": "fr-FR",
                  "timeZone": "Europe/Paris",
                  "type": "company"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Organisation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The organisation were sucessfully updated",
            "content": {
              "application/json": {
                "example": {
                  "item": 1,
                  "organisations": {
                    "1": {
                      "id": 1,
                      "ownersIds": [
                        2
                      ],
                      "isNetwork": false,
                      "contents": {
                        "name": "Sencrop",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris",
                        "type": "company"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/OrganisationItem"
                }
              }
            }
          },
          "404": {
            "description": "Organisation does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/chargebee/portal_sessions": {
      "get": {
        "operationId": "getOrganisationChargebeePortalSession",
        "summary": "Create a chargebee portal session",
        "tags": [
          "quotes"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The portal session created",
            "content": {
              "application/json": {
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/devices": {
      "get": {
        "operationId": "getOrganisationDevices",
        "summary": "Get a current organisation's devices.",
        "tags": [
          "devices",
          "partnerAccess"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested current organisation's devices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesItems"
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/devices/liveAggregations": {
      "get": {
        "operationId": "getOrganisationDevicesLiveAggregations",
        "summary": "Allow to run live aggregation queries against an organisation's devices.",
        "tags": [
          "data"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/devicesIds"
          },
          {
            "$ref": "#/components/parameters/aggregations"
          },
          {
            "$ref": "#/components/parameters/parameters"
          },
          {
            "$ref": "#/components/parameters/intervals"
          },
          {
            "$ref": "#/components/parameters/timeZone"
          },
          {
            "$ref": "#/components/parameters/statusDate"
          },
          {
            "$ref": "#/components/parameters/patched"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceLiveAggregationItems"
                },
                "example": {
                  "items": [
                    209,
                    2219,
                    5149
                  ],
                  "deviceLiveAggregations": {
                    "209": {
                      "RELATIVE_HUMIDITY_MEAN": {},
                      "WIND_SPEED_MEAN": {}
                    },
                    "2219": {
                      "RELATIVE_HUMIDITY_MEAN": {},
                      "WIND_SPEED_MEAN": {
                        "last_hour": 4.333333333333333,
                        "this_week": 10.102888086642599
                      }
                    },
                    "5149": {
                      "RELATIVE_HUMIDITY_MEAN": {
                        "last_hour": 76.55000000000001,
                        "this_week": 85.51822916666667
                      },
                      "WIND_SPEED_MEAN": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "One or more devices are not owned by the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/hostedPage": {
      "get": {
        "operationId": "getOrganisationHostedPage",
        "summary": "Create a chargebee hosted page for an organisation",
        "tags": [
          "billing"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "query",
            "name": "redirectUrl",
            "description": "Specifies the callback url for chargebee hosted page",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "planId",
            "required": true,
            "description": "Plan id related to chargebee plans",
            "schema": {
              "type": "string",
              "enum": [
                "plan-essential",
                "plan-essential-gbp",
                "plan-pro",
                "plan-pro-gbp",
                "plan-plus",
                "plan-plus-gbp"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "201": {
            "description": "The hosted page created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "embed": {
                      "type": "boolean"
                    },
                    "created_at": {
                      "type": "number"
                    },
                    "expires_at": {
                      "type": "number"
                    },
                    "id": {
                      "type": "string"
                    },
                    "object": {
                      "type": "string"
                    },
                    "resource_version": {
                      "type": "number"
                    },
                    "state": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "updated_at": {
                      "type": "number"
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/invitations/{invitationId}": {
      "get": {
        "operationId": "getOrganisationInvitation",
        "summary": "Get a user's invitation.",
        "tags": [
          "invitations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/invitationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested organisation's invitation",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-abba-abba-caca",
                  "invitations": {
                    "abbacaca-abba-abba-caca": {
                      "id": "abbacaca-abba-abba-caca",
                      "organisationId": 1,
                      "authordId": 1,
                      "status": "pending",
                      "completionDate": "2019-01-01T00:00:00Z",
                      "creationDate": "2019-01-01T00:00:00Z",
                      "modificationDate": "2019-01-01T00:00:00Z",
                      "contents": {
                        "recipientId": 3,
                        "type": "share",
                        "data": {
                          "type": "select",
                          "message": "Here are the stations we talk about",
                          "transmittable": false,
                          "devicesIds": [
                            301,
                            404
                          ],
                          "allowedDevicesIds": [
                            301,
                            404,
                            500
                          ],
                          "maximumSharedAccesses": 2
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/InvitationItem"
                }
              }
            }
          },
          "404": {
            "description": "The invitation does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/invitations": {
      "get": {
        "operationId": "getOrganisationInvitations",
        "summary": "Get an organisation's invitations.",
        "tags": [
          "invitations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/invitationWithTypesFilter"
          },
          {
            "$ref": "#/components/parameters/invitationWithStatusesFilter"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested organisation's invitations",
            "content": {
              "application/json": {
                "example": {
                  "items": [
                    "abbacaca-abba-abba-caca"
                  ],
                  "invitations": {
                    "abbacaca-abba-abba-caca": {
                      "id": "abbacaca-abba-abba-caca",
                      "organisationId": 1,
                      "authordId": 1,
                      "status": "pending",
                      "completionDate": "2019-01-01T00:00:00Z",
                      "creationDate": "2019-01-01T00:00:00Z",
                      "modificationDate": "2019-01-01T00:00:00Z",
                      "contents": {
                        "recipientId": 3,
                        "type": "share",
                        "data": {
                          "type": "select",
                          "message": "Here are the stations we talk about",
                          "transmittable": false,
                          "devicesIds": [
                            301,
                            404
                          ],
                          "allowedDevicesIds": [
                            301,
                            404,
                            500
                          ],
                          "maximumSharedAccesses": 2
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/InvitationItems"
                }
              }
            }
          },
          "404": {
            "description": "Organisation does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/members/{memberId}": {
      "get": {
        "operationId": "getOrganisationMember",
        "summary": "Retrieve all members from an organisation",
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "tags": [
          "organisations",
          "members"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/memberId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Organisation members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserItems"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/members": {
      "get": {
        "operationId": "getOrganisationMembers",
        "summary": "Retrieve all members from an organisation",
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "tags": [
          "organisations"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Organisation members",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserItems"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/networks/{networkId}/devices": {
      "get": {
        "operationId": "getOrganisationNetworkDevices",
        "summary": "Get an organisation network.",
        "tags": [
          "networks"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to retrieve",
            "required": true,
            "schema": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "enum": [
                10,
                50,
                100,
                1000
              ]
            }
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "in": "query",
            "description": "The geohash to lookup",
            "name": "geohash",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^[0-9bcdefghjkmnpqrstuvwxyz]+$",
              "maxLength": 12
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The organisation's network devices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkDevicesItems"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/networks": {
      "get": {
        "operationId": "getOrganisationNetworks",
        "summary": "Get the networks an organisation has access to.",
        "tags": [
          "networks"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The organisation's networks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworksItems"
                },
                "example": {
                  "items": [
                    "abbacaca-abba-caca-abba-cacaabbacaca"
                  ],
                  "networks": {
                    "abbacaca-abba-caca-abba-cacaabbacaca": {
                      "id": "abbacaca-abba-caca-abba-cacaabbacaca",
                      "organisationId": 1,
                      "name": "Abba corp.",
                      "description": "Abba corp. is a collaborative farming company.",
                      "logoUrl": "https://example.com/logo.png",
                      "type": "open",
                      "preferences": {},
                      "devicesCount": 1250,
                      "selectSharesCount": 600
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/place/{placeId}": {
      "get": {
        "operationId": "getOrganisationPlace",
        "summary": "Get a specific place for a organisation",
        "tags": [
          "organisations",
          "places"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/placeId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Places of organisation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceItem"
                }
              }
            }
          },
          "400": {
            "description": "Organisation or place does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/places": {
      "get": {
        "operationId": "getOrganisationPlaces",
        "summary": "Get all places for an organisation",
        "tags": [
          "organisations",
          "places"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Places of organisation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacesItems"
                }
              }
            }
          },
          "400": {
            "description": "Organisation does not exists or got no place",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "postOrganisationPlace",
        "summary": "Create a new place for an organisation.",
        "tags": [
          "organisations",
          "places"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The necessary contents to create a new place for an organisation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Place"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The place were created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceItem"
                }
              }
            }
          },
          "404": {
            "description": "Organisation does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/preferences": {
      "get": {
        "operationId": "getOrganisationPreferences",
        "summary": "Get an organisation's preferences.",
        "tags": [
          "preferences"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested organisation's preferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPreferences"
                }
              }
            }
          },
          "404": {
            "description": "Organisation does not exists or don't have preferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putOrganisationPreferences",
        "summary": "Update a organisation's preferences.",
        "tags": [
          "preferences"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The new organisation's preferences",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationPreferences"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The organisation's preferences were created/updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganisationPreferences"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/shares/{shareId}": {
      "get": {
        "operationId": "getOrganisationShare",
        "summary": "Get an organisation's shares.",
        "tags": [
          "shares"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/shareId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested organisation's shares",
            "content": {
              "application/json": {
                "example": {
                  "item": "1_2",
                  "shares": {
                    "1_2": {
                      "id": "1_2",
                      "sharingOrganisationId": 1,
                      "authorId": 3,
                      "granteeId": 2,
                      "creationDate": "2019-03-27T12:42:54.000Z",
                      "lastModificationDate": "2019-03-27T12:42:54.000Z",
                      "contents": {
                        "type": "select",
                        "recipientId": 4,
                        "message": "Here are the stations we talk about",
                        "transmittable": false,
                        "devicesIds": [
                          301,
                          404
                        ],
                        "allowedDevicesIds": [
                          301,
                          404,
                          500
                        ],
                        "maximumSharedAccesses": 2
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SharesItem"
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/shares": {
      "get": {
        "operationId": "getOrganisationShares",
        "summary": "Get an organisation's shares.",
        "tags": [
          "shares"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/shareWithTypesFilter"
          },
          {
            "$ref": "#/components/parameters/shareIsTransmittableFilter"
          },
          {
            "$ref": "#/components/parameters/shareWithModesFilter"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested organisation's shares",
            "content": {
              "application/json": {
                "example": {
                  "total": 1,
                  "items": [
                    "1_2"
                  ],
                  "shares": {
                    "1_2": {
                      "id": "1_2",
                      "sharingOrganisationId": 1,
                      "authorId": 3,
                      "granteeId": 2,
                      "creationDate": "2019-03-27T12:42:54.000Z",
                      "lastModificationDate": "2019-03-27T12:42:54.000Z",
                      "contents": {
                        "type": "select",
                        "recipientId": 4,
                        "message": "Here are the stations we talk about",
                        "transmittable": false,
                        "devicesIds": [
                          301,
                          404
                        ],
                        "allowedDevicesIds": [
                          301,
                          404,
                          500
                        ],
                        "maximumSharedAccesses": 2
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SharesItems"
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/trialOperations": {
      "get": {
        "operationId": "getOrganisationsTrialOperations",
        "summary": "Get an organisation's trial operation",
        "tags": [
          "organisations",
          "trial"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "query",
            "description": "If true, returns only active trial operations (not ended and not expired)",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested organisation's trial operations",
            "content": {
              "application/json": {
                "example": {
                  "items": [
                    "abbacaca-abba-abba-caca"
                  ],
                  "trialOperations": {
                    "abbacaca-abba-abba-caca": {
                      "id": "abbacaca-abba-abba-caca",
                      "creationDate": "2019-01-01T00:00:00Z",
                      "lastModificationDate": "2019-01-01T00:00:00Z",
                      "organisation": 1,
                      "contents": {
                        "title": "Trial operation",
                        "endDate": "2019-01-01T00:00:00Z",
                        "expirationDate": "2018-12-15T00:00:00Z"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TrialOperationItems"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/partners/{partnerId}/devices": {
      "get": {
        "operationId": "getPartnerDevices",
        "summary": "Retrieves the devices a partner has access to.",
        "tags": [
          "partners",
          "partnerAccess"
        ],
        "security": [
          {
            "bearerAuth": [
              "partner"
            ]
          },
          {
            "accessTokenAuth": [
              "partner"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/partnerId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The devices collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerDevicesItems"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "operationId": "getPing",
        "summary": "Checks API's availability.",
        "tags": [
          "system",
          "partnerAccess"
        ],
        "responses": {
          "200": {
            "description": "Pong",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "pong": {
                      "type": "string",
                      "enum": [
                        "pong"
                      ]
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ]
      }
    },
    "/weather/public/live": {
      "get": {
        "operationId": "getPublicWeatherLive",
        "summary": "Get last measure (for a specific type) from devices in a given area .",
        "tags": [
          "data"
        ],
        "security": [
          {
            "bearerAuth": [
              "team"
            ]
          },
          {
            "accessTokenAuth": [
              "team"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "in": "query",
            "description": "X coordinate of the top left corner of the map",
            "name": "topLeftBoxX",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "description": "Y coordinate of the top left corner of the map",
            "name": "topLeftBoxY",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "description": "X coordinate of the bottom right corner of the map",
            "name": "bottomRightBoxX",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "description": "Y coordinate of the bottom right corner of the map",
            "name": "bottomRightBoxY",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "description": "The type of measure to retrieve",
            "name": "measureType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "RAIN_FALL",
                "TEMPERATURE",
                "RELATIVE_HUMIDITY"
              ]
            }
          },
          {
            "in": "query",
            "description": "The type of aggregation",
            "name": "aggregationType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "avg",
                "min",
                "max"
              ]
            }
          },
          {
            "in": "query",
            "description": "The precision of the map",
            "name": "precision",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 6,
              "maximum": 12
            }
          },
          {
            "in": "query",
            "description": "The aggregatable measure",
            "name": "timeFrame",
            "required": false,
            "schema": {
              "type": "string",
              "default": "now",
              "enum": [
                "now",
                "1h",
                "1d",
                "1w"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "List of geohashes with last measures",
            "content": {
              "application/json": {
                "example": {
                  "items": [
                    {
                      "lat": 50.13066048241509,
                      "lon": 2.9270209449867375,
                      "value": 5.33,
                      "count": 182730
                    },
                    {
                      "lat": 47.68156846255694,
                      "lon": 2.868032825266157,
                      "value": 4.12,
                      "count": 174244
                    },
                    {
                      "lat": 46.591571260040155,
                      "lon": -0.8916227009702788,
                      "value": 5.93,
                      "count": 65862
                    }
                  ]
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "lat": {
                            "type": "number"
                          },
                          "lon": {
                            "type": "number"
                          },
                          "value": {
                            "type": "number"
                          },
                          "count": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/weather/public/liveAggregations": {
      "get": {
        "operationId": "getPublicWeatherLiveAggregations",
        "summary": "Get last measure (for a specifics measures and interval) from devices in a given area",
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/geohash"
          },
          {
            "$ref": "#/components/parameters/aggregations"
          },
          {
            "$ref": "#/components/parameters/liveInterval"
          },
          {
            "$ref": "#/components/parameters/timeZone"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "List of devices with last measures",
            "content": {
              "application/json": {
                "example": {
                  "items": [
                    209,
                    2219,
                    5149
                  ],
                  "devices": {
                    "209": {
                      "id": 209,
                      "location": {
                        "latitude": 52.21792804845461,
                        "longitude": 1.1007493431189284,
                        "precision": 0,
                        "source": "blur"
                      },
                      "model": 7
                    },
                    "2219": {
                      "id": 2219,
                      "location": {
                        "latitude": 52.21792804845461,
                        "longitude": 1.1007493431189284,
                        "precision": 0,
                        "source": "blur"
                      },
                      "model": 7
                    },
                    "5149": {
                      "id": 5149,
                      "location": {
                        "latitude": 52.21792804845461,
                        "longitude": 1.1007493431189284,
                        "precision": 0,
                        "source": "blur"
                      },
                      "model": 7
                    }
                  },
                  "deviceLiveAggregations": {
                    "209": {
                      "RELATIVE_HUMIDITY_MEAN": null,
                      "WIND_SPEED_MEAN": null
                    },
                    "2219": {
                      "RELATIVE_HUMIDITY_MEAN": null,
                      "WIND_SPEED_MEAN": 4.333333333333333
                    },
                    "5149": {
                      "RELATIVE_HUMIDITY_MEAN": 76.55000000000001,
                      "WIND_SPEED_MEAN": null
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/WeatherLiveAggregationItems"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/quotes/{quoteId}": {
      "get": {
        "operationId": "getQuote",
        "summary": "Get a quote",
        "tags": [
          "quotes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/quoteId"
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested quote",
            "content": {
              "application/json": {
                "example": {
                  "item": "ce892e63-dec3-11e9-88be-027b9b6f79d0",
                  "quotes": {
                    "ce892e63-dec3-11e9-88be-027b9b6f79d0": {
                      "id": "ce892e63-dec3-11e9-88be-027b9b6f79d0",
                      "author": 10039,
                      "hubSpotDealId": 2392,
                      "chargebee": {
                        "quote": {
                          "amount_due": 895,
                          "amount_paid": 0,
                          "credits_applied": 0,
                          "currency_code": "USD",
                          "customer_id": "__test__5SK0bLNFRFuFA7dXL",
                          "date": 1517507442,
                          "id": "4",
                          "line_item_discounts": [],
                          "line_item_taxes": [],
                          "line_items": [
                            {
                              "amount": 895,
                              "date_from": 1517507442,
                              "date_to": 1519926641,
                              "description": "No Trial - Prorated Charges",
                              "discount_amount": 0,
                              "entity_id": "no_trial",
                              "entity_type": "plan",
                              "id": "li___test__5SK0bLNFRFuFAAVXT",
                              "is_taxed": false,
                              "item_level_discount_amount": 0,
                              "object": "line_item",
                              "pricing_model": "per_unit",
                              "quantity": 1,
                              "subscription_id": "__test__5SK0bLNFRFuFA7dXL",
                              "tax_amount": 0,
                              "unit_amount": 895
                            }
                          ],
                          "object": "quote",
                          "operation_type": "change_subscription",
                          "price_type": "tax_exclusive",
                          "resource_version": 1517507442000,
                          "status": "open",
                          "sub_total": 895,
                          "subscription_id": "__test__5SK0bLNFRFuFA7dXL",
                          "taxes": [],
                          "total": 895,
                          "updated_at": 1517507442,
                          "valid_till": 1517593842
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/QuoteItem"
                }
              }
            }
          },
          "404": {
            "description": "Quote does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/quotes/{quoteId}/hostedPage": {
      "get": {
        "operationId": "getQuoteHostedPage",
        "summary": "Create a chargebee hosted page for quote",
        "tags": [
          "quotes"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/quoteId"
          },
          {
            "in": "query",
            "name": "tva",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "paymentMethod",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "card",
                "sepa",
                "online"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "201": {
            "description": "The hosted page created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/search/devices": {
      "get": {
        "operationId": "getSearchDevices",
        "summary": "Search devices around a geopoint",
        "tags": [
          "search",
          "devices"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/latitude"
          },
          {
            "$ref": "#/components/parameters/longitude"
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Devices around the position",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items",
                    "devices"
                  ],
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "pattern": "^[0-9]+$",
                        "minimum": 1
                      },
                      "minItems": 0,
                      "uniqueItems": true
                    },
                    "devices": {
                      "$ref": "#/components/schemas/GenericDeviceHash"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/search/networks/{networkId}/devices": {
      "get": {
        "operationId": "getSearchNetworkDevices",
        "summary": "Search devices around a geopoint for a network",
        "tags": [
          "search",
          "devices",
          "networks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/latitude"
          },
          {
            "$ref": "#/components/parameters/longitude"
          },
          {
            "$ref": "#/components/parameters/networkId"
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Devices around the position",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "items",
                    "devices"
                  ],
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "number",
                        "pattern": "^[0-9]+$",
                        "minimum": 1
                      },
                      "minItems": 0,
                      "uniqueItems": true
                    },
                    "devices": {
                      "$ref": "#/components/schemas/GenericDeviceHash"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/search/users": {
      "get": {
        "operationId": "getSearchUser",
        "summary": "Search for an user",
        "tags": [
          "search",
          "users"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "in": "query",
            "required": true,
            "description": "Email of the user to search",
            "name": "email",
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Users that match the search",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserItem"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/trialOperations/{trialOperationId}": {
      "get": {
        "operationId": "getTrialOperation",
        "summary": "Get a trial operation",
        "parameters": [
          {
            "$ref": "#/components/parameters/trialOperationId"
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested organisation's trial operations",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-abba-abba-caca",
                  "trialOperations": {
                    "abbacaca-abba-abba-caca": {
                      "id": "abbacaca-abba-abba-caca",
                      "creationDate": "2019-01-01T00:00:00Z",
                      "lastModificationDate": "2019-01-01T00:00:00Z",
                      "organisation": 1,
                      "contents": {
                        "title": "Trial operation",
                        "endDate": "2019-01-01T00:00:00Z",
                        "expirationDate": "2018-12-15T00:00:00Z"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TrialOperationItem"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "operationId": "getUser",
        "summary": "Get a user's profile.",
        "tags": [
          "users",
          "partnerAccess"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user",
            "content": {
              "application/json": {
                "example": {
                  "item": 1,
                  "users": {
                    "1": {
                      "id": 1,
                      "contents": {
                        "email": "dennis.ritchie@heaven.org",
                        "phone": "+33666666666",
                        "country": "FR",
                        "firstname": "Dennis",
                        "lastname": "Ritchie",
                        "crops": [
                          "garden"
                        ],
                        "locale": "en-US",
                        "timeZone": "Europe/Paris"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/UserItem"
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putUser",
        "summary": "Update a user's profile.",
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The new user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user were created/updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserItem"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/aggregations/{aggregationId}": {
      "get": {
        "operationId": "getUserAggregation",
        "summary": "Get a single user aggregation with statistics for graphs",
        "tags": [
          "aggregations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/aggregationId"
          },
          {
            "$ref": "#/components/parameters/patched"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The user's aggregation updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregationItem"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/aggregations": {
      "get": {
        "operationId": "getUserAggregations",
        "summary": "Get a user's aggregations.",
        "tags": [
          "aggregations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "in": "query",
            "description": "Wether the aggregations should be computed",
            "name": "compute",
            "schema": {
              "pattern": "^true|false$",
              "default": false,
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/patched"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's aggregations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregationItems"
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/alerts": {
      "get": {
        "operationId": "getUserAlerts",
        "summary": "Get a user's alerts.",
        "tags": [
          "alerts"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's alerts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsItems"
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/data/daily": {
      "get": {
        "operationId": "getUserDailyData",
        "summary": "Get a user's daily data for a given geo location.",
        "tags": [
          "data",
          "partnerAccess"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/latitude"
          },
          {
            "$ref": "#/components/parameters/longitude"
          },
          {
            "$ref": "#/components/parameters/beforeDate"
          },
          {
            "$ref": "#/components/parameters/days"
          },
          {
            "$ref": "#/components/parameters/includeHistory"
          },
          {
            "in": "query",
            "description": "The ranges to get the data from",
            "name": "ranges",
            "required": false,
            "explode": false,
            "schema": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "number",
                "enum": [
                  0.3,
                  3,
                  7,
                  10,
                  15,
                  40,
                  80
                ]
              }
            }
          },
          {
            "in": "query",
            "required": true,
            "explode": false,
            "description": "The measures to read",
            "name": "measures",
            "schema": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string",
                "enum": [
                  "RELATIVE_HUMIDITY",
                  "RELATIVE_HUMIDITY_MIN",
                  "RELATIVE_HUMIDITY_MAX",
                  "RELATIVE_HUMIDITY_INTERPOLATED",
                  "RELATIVE_HUMIDITY_LAST",
                  "TEMPERATURE",
                  "TEMPERATURE_MIN",
                  "TEMPERATURE_MAX",
                  "TEMPERATURE_INTERPOLATED",
                  "TEMPERATURE_LAST",
                  "WET_TEMPERATURE",
                  "WET_TEMPERATURE_MIN",
                  "WET_TEMPERATURE_MAX",
                  "WET_TEMPERATURE_INTERPOLATED",
                  "WET_TEMPERATURE_LAST",
                  "LEAF_SENSOR_CONDUCTIVITY",
                  "LEAF_SENSOR_CONDUCTIVITY_MIN",
                  "LEAF_SENSOR_CONDUCTIVITY_MAX",
                  "LEAF_SENSOR_CONDUCTIVITY_LAST",
                  "RAIN_FALL",
                  "RAIN_FALL_MEAN_SUM",
                  "RAIN_FALL_MEAN_SUM_ADJUSTED",
                  "WIND_SPEED",
                  "WIND_GUST",
                  "WIND_DIRECTION",
                  "MOVE",
                  "LEAF_WETNESS",
                  "LEAF_WETNESS_MEDIUM",
                  "LEAF_WETNESS_HIGH",
                  "IRRADIANCE",
                  "RH_AIR_H1",
                  "RH_AIR_H1_MIN",
                  "RH_AIR_H1_MAX",
                  "TEMP_AIR_H1",
                  "TEMP_AIR_H1_MIN",
                  "TEMP_AIR_H1_MAX",
                  "RAIN_TIC",
                  "WIND_MEAN",
                  "WIND_MAX"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/withCalibration"
          },
          {
            "$ref": "#/components/parameters/timeZone"
          },
          {
            "in": "query",
            "description": "Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.",
            "name": "patched",
            "schema": {
              "type": "boolean"
            },
            "default": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceStatistics"
                }
              }
            }
          },
          "404": {
            "description": "User/device does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/devices/{deviceId}": {
      "get": {
        "operationId": "getUserDevice",
        "summary": "Get a user's device.",
        "tags": [
          "devices",
          "partnerAccess"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "$ref": "#/components/parameters/includeHistory"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's device",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceItem"
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/devices/{deviceId}/countinuousStatistics": {
      "get": {
        "operationId": "getUserDeviceContinuousStatistics",
        "summary": "Get a user's device's continuous device's statistics.",
        "tags": [
          "devices",
          "data"
        ],
        "deprecated": true,
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "$ref": "#/components/parameters/startDate"
          },
          {
            "$ref": "#/components/parameters/endDate"
          },
          {
            "$ref": "#/components/parameters/measures"
          },
          {
            "$ref": "#/components/parameters/patched"
          },
          {
            "$ref": "#/components/parameters/includeHistory"
          },
          {
            "$ref": "#/components/parameters/timeZone"
          },
          {
            "$ref": "#/components/parameters/interval"
          },
          {
            "$ref": "#/components/parameters/withCalibration"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceStatistics"
                }
              }
            }
          },
          "404": {
            "description": "User/device does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/devices/{deviceId}/data/daily": {
      "get": {
        "operationId": "getUserDeviceDailyData",
        "summary": "Get a user's device's daily data.",
        "tags": [
          "data",
          "partnerAccess"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "$ref": "#/components/parameters/beforeDate"
          },
          {
            "$ref": "#/components/parameters/days"
          },
          {
            "$ref": "#/components/parameters/includeHistory"
          },
          {
            "$ref": "#/components/parameters/timeZone"
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "explode": false,
            "schema": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string",
                "enum": [
                  "RELATIVE_HUMIDITY",
                  "RELATIVE_HUMIDITY_MIN",
                  "RELATIVE_HUMIDITY_MAX",
                  "RELATIVE_HUMIDITY_INTERPOLATED",
                  "RELATIVE_HUMIDITY_LAST",
                  "TEMPERATURE",
                  "TEMPERATURE_MIN",
                  "TEMPERATURE_MAX",
                  "TEMPERATURE_INTERPOLATED",
                  "TEMPERATURE_LAST",
                  "WET_TEMPERATURE",
                  "WET_TEMPERATURE_MIN",
                  "WET_TEMPERATURE_MAX",
                  "WET_TEMPERATURE_INTERPOLATED",
                  "WET_TEMPERATURE_LAST",
                  "LEAF_SENSOR_CONDUCTIVITY",
                  "LEAF_SENSOR_CONDUCTIVITY_MIN",
                  "LEAF_SENSOR_CONDUCTIVITY_MAX",
                  "LEAF_SENSOR_CONDUCTIVITY_LAST",
                  "RAIN_FALL",
                  "RAIN_FALL_MEAN_SUM",
                  "RAIN_FALL_MEAN_SUM_ADJUSTED",
                  "WIND_SPEED",
                  "WIND_GUST",
                  "WIND_DIRECTION",
                  "MOVE",
                  "LEAF_WETNESS",
                  "LEAF_WETNESS_MEDIUM",
                  "LEAF_WETNESS_HIGH",
                  "IRRADIANCE",
                  "RH_AIR_H1",
                  "RH_AIR_H1_MIN",
                  "RH_AIR_H1_MAX",
                  "TEMP_AIR_H1",
                  "TEMP_AIR_H1_MIN",
                  "TEMP_AIR_H1_MAX",
                  "RAIN_TIC",
                  "WIND_MEAN",
                  "WIND_MAX"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/withCalibration"
          },
          {
            "in": "query",
            "description": "Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.",
            "name": "patched",
            "schema": {
              "type": "boolean"
            },
            "default": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceStatistics"
                }
              }
            }
          },
          "404": {
            "description": "User/device does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/devices/{deviceId}/forecasts": {
      "get": {
        "operationId": "getUserDeviceForecasts",
        "summary": "Get a user's device's forecasts.",
        "tags": [
          "devices",
          "forecasts"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "in": "query",
            "name": "date",
            "description": "Date of the forecasts",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's forecasts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceForecasts"
                }
              }
            }
          },
          "404": {
            "description": "User/device does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/devices/{deviceId}/data/hourly": {
      "get": {
        "operationId": "getUserDeviceHourlyData",
        "summary": "Get a user's device's hourly data.",
        "tags": [
          "data",
          "partnerAccess"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "$ref": "#/components/parameters/beforeDate"
          },
          {
            "$ref": "#/components/parameters/includeHistory"
          },
          {
            "$ref": "#/components/parameters/timeZone"
          },
          {
            "in": "query",
            "description": "The number of days to retrieve",
            "name": "days",
            "required": true,
            "schema": {
              "type": "number",
              "enum": [
                1,
                2,
                7,
                20,
                31
              ]
            }
          },
          {
            "in": "query",
            "required": true,
            "explode": false,
            "description": "The measures to read",
            "name": "measures",
            "schema": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string",
                "enum": [
                  "RELATIVE_HUMIDITY",
                  "RELATIVE_HUMIDITY_MIN",
                  "RELATIVE_HUMIDITY_MAX",
                  "RELATIVE_HUMIDITY_INTERPOLATED",
                  "RELATIVE_HUMIDITY_LAST",
                  "TEMPERATURE",
                  "TEMPERATURE_MIN",
                  "TEMPERATURE_MAX",
                  "TEMPERATURE_INTERPOLATED",
                  "TEMPERATURE_LAST",
                  "WET_TEMPERATURE",
                  "WET_TEMPERATURE_MIN",
                  "WET_TEMPERATURE_MAX",
                  "WET_TEMPERATURE_INTERPOLATED",
                  "WET_TEMPERATURE_LAST",
                  "LEAF_SENSOR_CONDUCTIVITY",
                  "LEAF_SENSOR_CONDUCTIVITY_MIN",
                  "LEAF_SENSOR_CONDUCTIVITY_MAX",
                  "LEAF_SENSOR_CONDUCTIVITY_LAST",
                  "RAIN_FALL",
                  "RAIN_FALL_MEAN_SUM",
                  "RAIN_FALL_MEAN_SUM_ADJUSTED",
                  "WIND_SPEED",
                  "WIND_GUST",
                  "WIND_DIRECTION",
                  "MOVE",
                  "LEAF_WETNESS",
                  "LEAF_WETNESS_MEDIUM",
                  "LEAF_WETNESS_HIGH",
                  "IRRADIANCE",
                  "RH_AIR_H1",
                  "RH_AIR_H1_MIN",
                  "RH_AIR_H1_MAX",
                  "TEMP_AIR_H1",
                  "TEMP_AIR_H1_MIN",
                  "TEMP_AIR_H1_MAX",
                  "RAIN_TIC",
                  "WIND_MEAN",
                  "WIND_MAX"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/withCalibration"
          },
          {
            "in": "query",
            "description": "Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.",
            "name": "patched",
            "schema": {
              "type": "boolean"
            },
            "default": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceStatistics"
                }
              }
            }
          },
          "404": {
            "description": "User/device does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/devices/{deviceId}/modules": {
      "get": {
        "operationId": "getUserDeviceModules",
        "summary": "Get the modules a user activated on its device",
        "tags": [
          "devices",
          "modules"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "List of the modules activated on the given user device",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleItems"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/devices/{deviceId}/positions": {
      "get": {
        "operationId": "getUserDevicePositions",
        "summary": "Get a user's device geographic positions historic.",
        "tags": [
          "devices"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "$ref": "#/components/parameters/includeHistory"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's device positions history",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "locationDate": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "latitude": {
                        "minimum": -90,
                        "maximum": 90,
                        "type": "number"
                      },
                      "longitude": {
                        "minimum": -180,
                        "maximum": 180,
                        "type": "number"
                      },
                      "altitude": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/devices/{deviceId}/data/raw": {
      "get": {
        "operationId": "getUserDeviceRawData",
        "summary": "Get a user's device's raw data.",
        "tags": [
          "data",
          "partnerAccess"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "$ref": "#/components/parameters/beforeDate"
          },
          {
            "$ref": "#/components/parameters/includeHistory"
          },
          {
            "in": "query",
            "required": true,
            "description": "The number of measures to retrieve",
            "name": "size",
            "schema": {
              "type": "number",
              "enum": [
                10,
                50,
                100,
                500,
                1000
              ]
            }
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "explode": false,
            "schema": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string",
                "enum": [
                  "RELATIVE_HUMIDITY",
                  "TEMPERATURE",
                  "WET_TEMPERATURE",
                  "RAIN_FALL",
                  "WIND_SPEED",
                  "WIND_GUST",
                  "WIND_DIRECTION",
                  "MOVE",
                  "LEAF_SENSOR_CONDUCTIVITY",
                  "RH_AIR_H1",
                  "TEMP_AIR_H1",
                  "RAIN_TIC",
                  "WIND_MEAN",
                  "WIND_MAX",
                  "LAT",
                  "LNG",
                  "ALT"
                ]
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "RELATIVE_HUMIDITY",
                          "TEMPERATURE",
                          "WET_TEMPERATURE",
                          "RAIN_FALL",
                          "WIND_SPEED",
                          "WIND_GUST",
                          "WIND_DIRECTION",
                          "MOVE",
                          "LEAF_SENSOR_CONDUCTIVITY",
                          "RH_AIR_H1",
                          "TEMP_AIR_H1",
                          "RAIN_TIC",
                          "WIND_MEAN",
                          "WIND_MAX"
                        ]
                      },
                      "value": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User/device does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/devices/{deviceId}/statistics": {
      "get": {
        "operationId": "getUserDeviceStatistics",
        "summary": "Get a user's device's device's statistics.",
        "tags": [
          "data",
          "partnerAccess"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "$ref": "#/components/parameters/startDate"
          },
          {
            "$ref": "#/components/parameters/endDate"
          },
          {
            "$ref": "#/components/parameters/measures"
          },
          {
            "$ref": "#/components/parameters/patched"
          },
          {
            "$ref": "#/components/parameters/includeHistory"
          },
          {
            "$ref": "#/components/parameters/timeZone"
          },
          {
            "$ref": "#/components/parameters/interval"
          },
          {
            "$ref": "#/components/parameters/withCalibration"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceStatistics"
                }
              }
            }
          },
          "404": {
            "description": "User/device does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/devices/{deviceId}/summaries/{date}": {
      "get": {
        "operationId": "getUserDeviceSummary",
        "summary": "Get a user's device's summary at a given date.",
        "tags": [
          "devices",
          "data"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "$ref": "#/components/parameters/includeHistory"
          },
          {
            "in": "path",
            "required": true,
            "description": "The summary date",
            "name": "date",
            "schema": {
              "type": "string",
              "format": "date-time",
              "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z"
            }
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "explode": false,
            "schema": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string",
                "enum": [
                  "RELATIVE_HUMIDITY",
                  "TEMPERATURE",
                  "WET_TEMPERATURE",
                  "RAIN_FALL",
                  "WIND_SPEED",
                  "WIND_GUST",
                  "WIND_DIRECTION",
                  "MOVE",
                  "LEAF_SENSOR_CONDUCTIVITY",
                  "RH_AIR_H1",
                  "TEMP_AIR_H1",
                  "RAIN_TIC",
                  "WIND_MEAN",
                  "WIND_MAX"
                ]
              }
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceSummaryItem"
                }
              }
            }
          },
          "404": {
            "description": "User/device does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/devices": {
      "get": {
        "operationId": "getUserDevices",
        "summary": "Get a user's devices.",
        "tags": [
          "devices",
          "partnerAccess"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/includeHistory"
          },
          {
            "in": "query",
            "description": "The status date",
            "name": "date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "description": "The measures to read",
            "name": "measures",
            "explode": false,
            "schema": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string",
                "enum": [
                  "RELATIVE_HUMIDITY",
                  "TEMPERATURE",
                  "WET_TEMPERATURE",
                  "RAIN_FALL",
                  "WIND_SPEED",
                  "WIND_GUST",
                  "WIND_DIRECTION",
                  "MOVE",
                  "LEAF_SENSOR_CONDUCTIVITY",
                  "RH_AIR_H1",
                  "TEMP_AIR_H1",
                  "RAIN_TIC",
                  "WIND_MEAN",
                  "WIND_MAX"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/patched"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items to retrieve",
            "required": false,
            "schema": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "enum": [
                10,
                50,
                100
              ]
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "The index in results",
            "required": false,
            "schema": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 0,
              "multipleOf": 10
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's devices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesItems"
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/devices/liveAggregations": {
      "get": {
        "operationId": "getUserDevicesLiveAggregations",
        "summary": "Allow to run live aggregation queries against a user devices.",
        "tags": [
          "data",
          "partnerAccess"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/devicesIds"
          },
          {
            "$ref": "#/components/parameters/aggregations"
          },
          {
            "$ref": "#/components/parameters/parameters"
          },
          {
            "$ref": "#/components/parameters/intervals"
          },
          {
            "$ref": "#/components/parameters/timeZone"
          },
          {
            "$ref": "#/components/parameters/statusDate"
          },
          {
            "$ref": "#/components/parameters/patched"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceLiveAggregationItems"
                },
                "example": {
                  "items": [
                    209,
                    2219,
                    5149
                  ],
                  "deviceLiveAggregations": {
                    "209": {
                      "RELATIVE_HUMIDITY_MEAN": {},
                      "WIND_SPEED_MEAN": {}
                    },
                    "2219": {
                      "RELATIVE_HUMIDITY_MEAN": {},
                      "WIND_SPEED_MEAN": {
                        "last_hour": 4.333333333333333,
                        "this_week": 10.102888086642599
                      }
                    },
                    "5149": {
                      "RELATIVE_HUMIDITY_MEAN": {
                        "last_hour": 76.55000000000001,
                        "this_week": 85.51822916666667
                      },
                      "WIND_SPEED_MEAN": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "One or more devices are not owned by the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/forecasts": {
      "get": {
        "operationId": "getUserForecasts",
        "summary": "Get a user's forecasts.",
        "tags": [
          "forecasts"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/latitude"
          },
          {
            "$ref": "#/components/parameters/longitude"
          },
          {
            "in": "query",
            "name": "date",
            "description": "Date of the forecasts",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's forecasts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceForecasts"
                }
              }
            }
          },
          "404": {
            "description": "User/device does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/data/hourly": {
      "get": {
        "operationId": "getUserHourlyData",
        "summary": "Get a user's hourly data for a given geo location.",
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/latitude"
          },
          {
            "$ref": "#/components/parameters/longitude"
          },
          {
            "$ref": "#/components/parameters/beforeDate"
          },
          {
            "$ref": "#/components/parameters/includeHistory"
          },
          {
            "in": "query",
            "description": "The number of days to retrieve",
            "name": "days",
            "required": true,
            "schema": {
              "type": "number",
              "enum": [
                1,
                2,
                7,
                20,
                31
              ]
            }
          },
          {
            "in": "query",
            "description": "The ranges to get the data from",
            "name": "ranges",
            "required": false,
            "explode": false,
            "schema": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "number",
                "enum": [
                  0.3,
                  3,
                  7,
                  10,
                  15,
                  40,
                  80
                ]
              }
            }
          },
          {
            "in": "query",
            "required": true,
            "description": "The measures to read",
            "name": "measures",
            "explode": false,
            "schema": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string",
                "enum": [
                  "RELATIVE_HUMIDITY",
                  "RELATIVE_HUMIDITY_MIN",
                  "RELATIVE_HUMIDITY_MAX",
                  "RELATIVE_HUMIDITY_INTERPOLATED",
                  "RELATIVE_HUMIDITY_LAST",
                  "TEMPERATURE",
                  "TEMPERATURE_MIN",
                  "TEMPERATURE_MAX",
                  "TEMPERATURE_INTERPOLATED",
                  "TEMPERATURE_LAST",
                  "WET_TEMPERATURE",
                  "WET_TEMPERATURE_MIN",
                  "WET_TEMPERATURE_MAX",
                  "WET_TEMPERATURE_INTERPOLATED",
                  "WET_TEMPERATURE_LAST",
                  "LEAF_SENSOR_CONDUCTIVITY",
                  "LEAF_SENSOR_CONDUCTIVITY_MIN",
                  "LEAF_SENSOR_CONDUCTIVITY_MAX",
                  "LEAF_SENSOR_CONDUCTIVITY_LAST",
                  "RAIN_FALL",
                  "RAIN_FALL_MEAN_SUM",
                  "RAIN_FALL_MEAN_SUM_ADJUSTED",
                  "WIND_SPEED",
                  "WIND_GUST",
                  "WIND_DIRECTION",
                  "MOVE",
                  "LEAF_WETNESS",
                  "LEAF_WETNESS_MEDIUM",
                  "LEAF_WETNESS_HIGH",
                  "IRRADIANCE",
                  "RH_AIR_H1",
                  "RH_AIR_H1_MIN",
                  "RH_AIR_H1_MAX",
                  "TEMP_AIR_H1",
                  "TEMP_AIR_H1_MIN",
                  "TEMP_AIR_H1_MAX",
                  "RAIN_TIC",
                  "WIND_MEAN",
                  "WIND_MAX"
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/withCalibration"
          },
          {
            "$ref": "#/components/parameters/timeZone"
          },
          {
            "in": "query",
            "description": "Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.",
            "name": "patched",
            "schema": {
              "type": "boolean"
            },
            "default": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested device's statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceStatistics"
                }
              }
            }
          },
          "404": {
            "description": "User/device does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/intercomHash": {
      "get": {
        "operationId": "getUserIntercomHash",
        "summary": "HMAC Digest for the userId, used for the identity verification of intercom",
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "in": "query",
            "description": "Type of the platform",
            "name": "platform",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "android",
                "ios",
                "web"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The HMAC",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hmac": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/invitations/{invitationId}": {
      "get": {
        "operationId": "getUserInvitation",
        "summary": "Get a user's invitation.",
        "tags": [
          "invitations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/invitationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The user's invitation",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-abba-abba-caca",
                  "invitations": {
                    "abbacaca-abba-abba-caca": {
                      "id": "abbacaca-abba-abba-caca",
                      "organisationId": 1,
                      "authordId": 1,
                      "status": "pending",
                      "completionDate": "2019-01-01T00:00:00Z",
                      "creationDate": "2019-01-01T00:00:00Z",
                      "modificationDate": "2019-01-01T00:00:00Z",
                      "contents": {
                        "recipientId": 3,
                        "type": "share",
                        "data": {
                          "type": "select",
                          "message": "Here are the stations we talk about",
                          "transmittable": false,
                          "devicesIds": [
                            301,
                            404
                          ],
                          "allowedDevicesIds": [
                            301,
                            404,
                            500
                          ],
                          "maximumSharedAccesses": 2
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/InvitationItem"
                }
              }
            }
          },
          "404": {
            "description": "The invitation does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/invitations": {
      "get": {
        "operationId": "getUserInvitations",
        "summary": "Get a user's invitations.",
        "tags": [
          "invitations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "$ref": "#/components/parameters/invitationWithTypesFilter"
          },
          {
            "$ref": "#/components/parameters/invitationWithStatusesFilter"
          },
          {
            "$ref": "#/components/parameters/invitationWithModesFilter"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The user's invitations",
            "content": {
              "application/json": {
                "example": {
                  "items": [
                    "abbacaca-abba-abba-caca"
                  ],
                  "invitations": {
                    "abbacaca-abba-abba-caca": {
                      "id": "abbacaca-abba-abba-caca",
                      "organisationId": 1,
                      "authordId": 1,
                      "status": "pending",
                      "completionDate": "2019-01-01T00:00:00Z",
                      "creationDate": "2019-01-01T00:00:00Z",
                      "modificationDate": "2019-01-01T00:00:00Z",
                      "contents": {
                        "recipientId": 3,
                        "type": "share",
                        "data": {
                          "type": "select",
                          "message": "Here are the stations we talk about",
                          "transmittable": false,
                          "devicesIds": [
                            301,
                            404
                          ],
                          "allowedDevicesIds": [
                            301,
                            404,
                            500
                          ],
                          "maximumSharedAccesses": 2
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/InvitationItems"
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations": {
      "get": {
        "operationId": "getUserOrganisations",
        "summary": "Get all user's organisations.",
        "tags": [
          "organisations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The user's organisations",
            "content": {
              "application/json": {
                "example": {
                  "items": [
                    1
                  ],
                  "organisations": {
                    "1": {
                      "id": 1,
                      "ownersIds": [
                        2
                      ],
                      "isNetwork": false,
                      "contents": {
                        "name": "Sencrop",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris",
                        "type": "company"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/OrganisationItems"
                }
              }
            }
          },
          "404": {
            "description": "User or organisation does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "postUserOrganisation",
        "summary": "Creates a new organisation for a user (add him as owner).",
        "tags": [
          "organisations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The necessary contents to create a new organisation",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": 1,
                "ownersIds": [
                  2
                ],
                "isNetwork": false,
                "contents": {
                  "name": "Sencrop",
                  "locale": "fr-FR",
                  "timeZone": "Europe/Paris",
                  "type": "company"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Organisation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The organisation were created",
            "content": {
              "application/json": {
                "example": {
                  "item": 1,
                  "organisations": {
                    "1": {
                      "id": 1,
                      "ownersIds": [
                        2
                      ],
                      "isNetwork": false,
                      "contents": {
                        "name": "Sencrop",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris",
                        "type": "company"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/OrganisationItem"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/pendingInvitations/{invitationId}": {
      "get": {
        "operationId": "getUserPendingInvitation",
        "summary": "Get a user's pending invitation.",
        "tags": [
          "invitations"
        ],
        "deprecated": true,
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/invitationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The user's pending invitation",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-abba-abba-caca",
                  "invitations": {
                    "abbacaca-abba-abba-caca": {
                      "id": "abbacaca-abba-abba-caca",
                      "organisationId": 1,
                      "authordId": 1,
                      "status": "pending",
                      "completionDate": "2019-01-01T00:00:00Z",
                      "creationDate": "2019-01-01T00:00:00Z",
                      "modificationDate": "2019-01-01T00:00:00Z",
                      "contents": {
                        "recipientId": 3,
                        "type": "share",
                        "data": {
                          "type": "select",
                          "message": "Here are the stations we talk about",
                          "transmittable": false,
                          "devicesIds": [
                            301,
                            404
                          ],
                          "allowedDevicesIds": [
                            301,
                            404,
                            500
                          ],
                          "maximumSharedAccesses": 2
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/InvitationItem"
                }
              }
            }
          },
          "404": {
            "description": "The invitation does not exist or is not pending",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/pendingInvitations": {
      "get": {
        "operationId": "getUserPendingInvitations",
        "summary": "Get a user's pending invitations.",
        "tags": [
          "invitations"
        ],
        "deprecated": true,
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/start"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The user's pending invitations",
            "content": {
              "application/json": {
                "example": {
                  "items": [
                    "abbacaca-abba-abba-caca"
                  ],
                  "invitations": {
                    "abbacaca-abba-abba-caca": {
                      "id": "abbacaca-abba-abba-caca",
                      "organisationId": 1,
                      "authordId": 1,
                      "status": "pending",
                      "completionDate": "2019-01-01T00:00:00Z",
                      "creationDate": "2019-01-01T00:00:00Z",
                      "modificationDate": "2019-01-01T00:00:00Z",
                      "contents": {
                        "recipientId": 3,
                        "type": "share",
                        "data": {
                          "type": "select",
                          "message": "Here are the stations we talk about",
                          "transmittable": false,
                          "devicesIds": [
                            301,
                            404
                          ],
                          "allowedDevicesIds": [
                            301,
                            404,
                            500
                          ],
                          "maximumSharedAccesses": 2
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/InvitationItems"
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/preferences": {
      "get": {
        "operationId": "getUserPreferences",
        "summary": "Get an user's preferences.",
        "tags": [
          "preferences"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's preferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferences"
                }
              }
            }
          },
          "404": {
            "description": "User does not exists or don't have preferences",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putUserPreferences",
        "summary": "Update a user's preferences.",
        "tags": [
          "preferences"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The new user's preferences",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPreferences"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user's preferences were created/updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPreferences"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/statistics": {
      "get": {
        "operationId": "getUserStatistics",
        "summary": "Get a user's statistics for a given location.",
        "tags": [
          "data"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/latitude"
          },
          {
            "$ref": "#/components/parameters/longitude"
          },
          {
            "$ref": "#/components/parameters/startDate"
          },
          {
            "$ref": "#/components/parameters/endDate"
          },
          {
            "$ref": "#/components/parameters/measures"
          },
          {
            "$ref": "#/components/parameters/ranges"
          },
          {
            "$ref": "#/components/parameters/patched"
          },
          {
            "$ref": "#/components/parameters/includeHistory"
          },
          {
            "$ref": "#/components/parameters/interval"
          },
          {
            "$ref": "#/components/parameters/withCalibration"
          },
          {
            "$ref": "#/components/parameters/timeZone"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested user's statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceStatistics"
                }
              }
            }
          },
          "404": {
            "description": "User does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/weather/live": {
      "get": {
        "operationId": "getWeatherLive",
        "summary": "Get last measure (for a specific type) from devices in a given area (1 hour for RAIN_FALL).",
        "tags": [
          "data"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/geohash"
          },
          {
            "$ref": "#/components/parameters/measureType"
          },
          {
            "in": "query",
            "description": "The aggregatable measure",
            "name": "timeFrame",
            "required": false,
            "schema": {
              "type": "string",
              "default": "now",
              "enum": [
                "now",
                "1h",
                "1d",
                "1w"
              ]
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "List of geohashes (small precision) with last measures",
            "content": {
              "application/json": {
                "example": {
                  "items": [
                    {
                      "geohash": "u0cdu",
                      "RAIN_FALL": 0
                    },
                    {
                      "geohash": "u0cd0",
                      "RAIN_FALL": 1
                    },
                    {
                      "geohash": "u0cdn",
                      "RAIN_FALL": 3
                    }
                  ]
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "geohash": {
                            "type": "string"
                          }
                        },
                        "patternProperties": {
                          "^RELATIVE_HUMIDITY|TEMPERATURE|WIND_SPEED|WIND_GUST|WIND_DIRECTION|RAIN_FALL|IRRADIANCE$": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/invitations/{invitationId}/resend": {
      "post": {
        "operationId": "postInvitationResend",
        "summary": "Resend the invitation",
        "tags": [
          "invitations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/invitationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "The invitation email has been sended again"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/sign_in": {
      "post": {
        "operationId": "postLogin",
        "summary": "Log a user in",
        "tags": [
          "miscellaneous"
        ],
        "parameter": [
          {
            "name": "useJWT",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "The infos to log in",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ]
      }
    },
    "/password/lost": {
      "post": {
        "operationId": "postLostPassword",
        "summary": "Request a password change e-mail.",
        "tags": [
          "miscellaneous"
        ],
        "requestBody": {
          "description": "The infos to send the mail",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "callbackURL": {
                    "type": "string",
                    "pattern": "^https://(\\w+\\.)+sencrop\\.com(/[^?]*)?$"
                  },
                  "callbackPath": {
                    "type": "string",
                    "description": "Use callbackURL instead"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password change email sent"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ]
      }
    },
    "/oauth2/token": {
      "post": {
        "operationId": "postOAuth2Token",
        "summary": "Implements the [Token Endpoint](https://tools.ietf.org/html/rfc6749#section-3.2)\n as defined per the OAuth2 RFC.",
        "tags": [
          "oauth2",
          "partnerAccess"
        ],
        "security": [
          {
            "basicAuth": [
              "partner"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Basic mecanism",
            "schema": {
              "type": "string",
              "pattern": "^(B|b)asic (.+)$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AuthorizationCodeTokenRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/PasswordTokenRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/ClientCredentialsTokenRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/RefreshTokenRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/ModuleTokenRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/CodeRequestTokenRequestBody"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AuthorizationCodeTokenRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/PasswordTokenRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/ClientCredentialsTokenRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/RefreshTokenRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/ModuleTokenRequestBody"
                  },
                  {
                    "$ref": "#/components/schemas/CodeRequestTokenRequestBody"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token successfully issued, see https://tools.ietf.org/html/rfc6749#section-5 .",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "access_token",
                    "token_type"
                  ],
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "token_type": {
                      "description": "See https://tools.ietf.org/html/rfc6749#section-7.1",
                      "type": "string",
                      "enum": [
                        "bearer",
                        "mac"
                      ]
                    },
                    "expires_in": {
                      "description": "The lifetime in seconds of the access token",
                      "type": "number"
                    },
                    "refresh_token": {
                      "description": "See https://tools.ietf.org/html/rfc6749#section-6",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Access token error response, see https://tools.ietf.org/html/rfc6749#section-5.2",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "type": "string",
                      "enum": [
                        "invalid_request",
                        "invalid_client",
                        "invalid_grant",
                        "unauthorized_client",
                        "unsupported_grant_type",
                        "invalid_scope"
                      ]
                    },
                    "error_description": {
                      "type": "string"
                    },
                    "error_uri": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations": {
      "post": {
        "operationId": "postOrganisation",
        "summary": "Creates a new organisation.",
        "tags": [
          "organisations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "requestBody": {
          "description": "The necessary contents to create a new organisation",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": 1,
                "ownersIds": [
                  2
                ],
                "isNetwork": false,
                "contents": {
                  "name": "Sencrop",
                  "locale": "fr-FR",
                  "timeZone": "Europe/Paris",
                  "type": "company"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Organisation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The organisation were created",
            "content": {
              "application/json": {
                "example": {
                  "item": 1,
                  "organisations": {
                    "1": {
                      "id": 1,
                      "ownersIds": [
                        2
                      ],
                      "isNetwork": false,
                      "contents": {
                        "name": "Sencrop",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris",
                        "type": "company"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/OrganisationItem"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ]
      }
    },
    "/support/organisations/{organisationId}/endTrial": {
      "post": {
        "operationId": "postOrganisationEndTrialSupport",
        "summary": "Remove the trial of an organisation",
        "tags": [
          "support"
        ],
        "security": [
          {
            "bearerAuth": [
              "team"
            ]
          },
          {
            "accessTokenAuth": [
              "team"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Organisation has been put out of trial"
          },
          "400": {
            "description": "Organisation does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Organisation does not belong to a sponsoring network"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/networkMembers/{networkMemberId}/plan": {
      "post": {
        "operationId": "postOrganisationNetworkMemberPlan",
        "summary": "Add a plan to a organisation of a sponsored network",
        "tags": [
          "networks"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/networkMemberId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The plan to add",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "planId": "plan-pro"
              },
              "schema": {
                "type": "object",
                "required": [
                  "planId"
                ],
                "properties": {
                  "planId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The plan has been successfully added to the organisation"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/paymentComplete": {
      "post": {
        "operationId": "postOrganisationPaymentComplete",
        "summary": "Complete the payment flow of an organisation, if chargebee hook is delayed",
        "tags": [
          "billing"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The plan settings",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "planId"
                ],
                "properties": {
                  "planId": {
                    "type": "string",
                    "enum": [
                      "plan-essential",
                      "plan-pro",
                      "plan-plus",
                      "plan-essential-gbp",
                      "plan-pro-gbp",
                      "plan-plus-gbp"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organisation plan has been succesfully updated"
          },
          "404": {
            "description": "Organisation not found / with an active plan"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/support/organisations/{organisationId}/toNetwork": {
      "post": {
        "operationId": "postOrganisationToNetworkSupport",
        "summary": "Convert an organisation to a network",
        "tags": [
          "support",
          "networks"
        ],
        "security": [
          {
            "bearerAuth": [
              "team"
            ]
          },
          {
            "accessTokenAuth": [
              "team"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "conversionType": {
                    "type": "string",
                    "enum": [
                      "network",
                      "sponsoring",
                      "promoting"
                    ]
                  },
                  "convertToBottom": {
                    "type": "boolean"
                  },
                  "optOut": {
                    "type": "boolean"
                  },
                  "sponsoringCoupon": {
                    "type": "string"
                  },
                  "promotingTrialEndDate": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organisation has been converted"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/trialReactivation": {
      "post": {
        "operationId": "postOrganisationTrialReactivation",
        "summary": "Reactivate a trial organisation",
        "tags": [
          "organisations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "201": {
            "description": "Organisation trial has been updated"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/partners/{partnerId}/tokens": {
      "post": {
        "operationId": "postPartnerToken",
        "summary": "Create a user token (deprecated, use OAuth2)",
        "tags": [
          "partners",
          "partnerAccess"
        ],
        "deprecated": true,
        "security": [
          {
            "basicAuth": [
              "partner"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/partnerId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Basic mecanism",
            "schema": {
              "type": "string",
              "pattern": "^(B|b)asic (.+)$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "Create a user token",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "code"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "code"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "code": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User token created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/partners/{partnerId}/tokenRequests": {
      "post": {
        "operationId": "postPartnerTokenRequest",
        "summary": "Request a user token",
        "tags": [
          "partners",
          "partnerAccess"
        ],
        "security": [
          {
            "basicAuth": [
              "partner"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/partnerId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Basic mecanism",
            "schema": {
              "type": "string",
              "pattern": "^(B|b)asic (.+)$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "Request a user token",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User token requested"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/quotes/{quoteId}/offline": {
      "post": {
        "operationId": "postQuoteOffline",
        "summary": "Set offline mode for a quote",
        "tags": [
          "quotes"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/quoteId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "201": {
            "description": "Offline quote has been set"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "operationId": "postRegister",
        "summary": "Register a new user and his organisation",
        "tags": [
          "users",
          "organisations"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "Deprecated, not used anymore",
            "name": "noTrial",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "description": "Operation trial id used to compute trialEndDate of organisation",
            "name": "trialOperationId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "UUID of the godfather organisation (through a referral program)",
            "name": "referralId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "ID of the godfather user (through a referral program)",
            "name": "referralAuthorId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The user / organisation / organisationPlace infos",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "user",
                  "organisationPlace"
                ],
                "additionalProperties": false,
                "properties": {
                  "user": {
                    "type": "object",
                    "required": [
                      "email",
                      "password",
                      "locale",
                      "timeZone"
                    ],
                    "properties": {
                      "email": {
                        "type": "string",
                        "format": "email"
                      },
                      "phone": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string",
                        "minLength": 8
                      },
                      "locale": {
                        "type": "string",
                        "pattern": "^[a-z]{2}(-[A-Z]{2,3})?$",
                        "maxLength": 5
                      },
                      "timeZone": {
                        "type": "string",
                        "pattern": "^[a-zA-Z]+/[a-zA-Z]+|UTC|GMT$",
                        "maxLength": 50
                      },
                      "referral": {
                        "$ref": "#/components/schemas/Referral"
                      }
                    }
                  },
                  "organisation": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "organisationPlace": {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "line1",
                      "city",
                      "zip",
                      "country"
                    ],
                    "properties": {
                      "line1": {
                        "type": "string"
                      },
                      "line2": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "zip": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string",
                        "minLength": 2,
                        "maxLength": 2,
                        "pattern": "[A-Z]{2}"
                      },
                      "latitude": {
                        "minimum": -90,
                        "maximum": 90,
                        "type": "number"
                      },
                      "longitude": {
                        "minimum": -180,
                        "maximum": 180,
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user and his organistion has been created"
          },
          "400": {
            "description": "The user has already been validated"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cloudinary/signature": {
      "post": {
        "operationId": "postSignatureCloudinary",
        "summary": "Get a cloudinary signature to make a signed upload",
        "tags": [
          "miscellaneous"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "requestBody": {
          "description": "The cloudinary request to sign",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cloudinary signature",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "signature": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ]
      }
    },
    "/utils/checkSignup": {
      "post": {
        "operationId": "postSignupCheck",
        "summary": "Hit the server to check the email can be used to signup.",
        "tags": [
          "miscellaneous"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mechanism",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The email to check",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email can be used."
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/socialImage": {
      "post": {
        "operationId": "postSocialImage",
        "summary": "Generate a new image to share it on social media",
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "requestBody": {
          "description": "The params to generate the image",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "width": {
                    "type": "number"
                  },
                  "height": {
                    "type": "number"
                  },
                  "template": {
                    "type": "string"
                  },
                  "format": {
                    "type": "string"
                  },
                  "params": {
                    "type": "object",
                    "additionalProperties": true,
                    "properties": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The requested image"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "postUser",
        "tags": [
          "users"
        ],
        "summary": "Create a new user.",
        "requestBody": {
          "description": "The new user",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": 1,
                "contents": {
                  "email": "dennis.ritchie@heaven.org",
                  "phone": "+33666666666",
                  "country": "FR",
                  "firstname": "Dennis",
                  "lastname": "Ritchie",
                  "crops": [
                    "garden"
                  ],
                  "locale": "en-US",
                  "timeZone": "Europe/Paris"
                },
                "password": "oudelali"
              },
              "schema": {
                "$ref": "#/components/schemas/NewUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user were successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserItem"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ]
      }
    },
    "/users/{userId}/devices/{deviceId}/export": {
      "post": {
        "operationId": "postUserDeviceExport",
        "summary": "Create a new export job",
        "tags": [
          "devices",
          "data"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "in": "query",
            "name": "emailRecipient",
            "required": false,
            "description": "Recipient email of the export (override default user email)",
            "schema": {
              "type": "string",
              "format": "email"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The necessary contents to create an export",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "startDate",
                  "endDate",
                  "measures",
                  "interval",
                  "timeZone",
                  "fileFormat",
                  "patched"
                ],
                "properties": {
                  "startDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "measures": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "string",
                      "enum": [
                        "RELATIVE_HUMIDITY",
                        "RELATIVE_HUMIDITY_MIN",
                        "RELATIVE_HUMIDITY_MAX",
                        "RELATIVE_HUMIDITY_INTERPOLATED",
                        "RELATIVE_HUMIDITY_LAST",
                        "TEMPERATURE",
                        "TEMPERATURE_MIN",
                        "TEMPERATURE_MAX",
                        "TEMPERATURE_INTERPOLATED",
                        "TEMPERATURE_LAST",
                        "WET_TEMPERATURE",
                        "WET_TEMPERATURE_MIN",
                        "WET_TEMPERATURE_MAX",
                        "WET_TEMPERATURE_INTERPOLATED",
                        "WET_TEMPERATURE_LAST",
                        "LEAF_SENSOR_CONDUCTIVITY",
                        "LEAF_SENSOR_CONDUCTIVITY_MIN",
                        "LEAF_SENSOR_CONDUCTIVITY_MAX",
                        "LEAF_SENSOR_CONDUCTIVITY_LAST",
                        "RAIN_FALL",
                        "RAIN_FALL_MEAN_SUM",
                        "RAIN_FALL_MEAN_SUM_ADJUSTED",
                        "WIND_SPEED",
                        "WIND_GUST",
                        "WIND_DIRECTION",
                        "MOVE",
                        "LEAF_WETNESS",
                        "LEAF_WETNESS_MEDIUM",
                        "LEAF_WETNESS_HIGH",
                        "IRRADIANCE",
                        "RH_AIR_H1",
                        "RH_AIR_H1_MIN",
                        "RH_AIR_H1_MAX",
                        "TEMP_AIR_H1",
                        "TEMP_AIR_H1_MIN",
                        "TEMP_AIR_H1_MAX",
                        "RAIN_TIC",
                        "WIND_MEAN",
                        "WIND_MAX"
                      ]
                    }
                  },
                  "interval": {
                    "description": "The interval of data (Accepted value : 31 days for 1h interval, 1 year for 1d interval, 5y for 1w interval)",
                    "type": "string",
                    "enum": [
                      "15m",
                      "1h",
                      "1d",
                      "1w",
                      "1M"
                    ]
                  },
                  "timeZone": {
                    "type": "string",
                    "pattern": "^[a-zA-Z]+/[a-zA-Z]+|UTC|GMT$",
                    "maxLength": 50
                  },
                  "fileFormat": {
                    "type": "string",
                    "enum": [
                      "csv",
                      "xlsx",
                      "ods"
                    ]
                  },
                  "patched": {
                    "type": "boolean",
                    "description": "Wether you want to get only original data or eventually patched ones to avoid holes."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Export job has been created"
          },
          "404": {
            "description": "User/device does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/networks/{networkId}/invitations": {
      "post": {
        "operationId": "postUserNetworkInvitation",
        "summary": "Invite a user to reach the Network page",
        "tags": [
          "networks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          },
          {
            "in": "query",
            "description": "Operation trial id used to compute trialEndDate of organisation",
            "name": "trialOperationId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The user infos",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "planId": {
                    "type": "string"
                  },
                  "callbackURL": {
                    "description": "Deprecated, not used anymore",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully upserted the network's invitation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationItem"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/aggregations": {
      "post": {
        "operationId": "postUserOrganisationAggregation",
        "summary": "Create a new organisation's aggregation.",
        "tags": [
          "aggregations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The organisation's aggregation to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Aggregation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the organisation's aggregation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregationItem"
                }
              }
            }
          },
          "404": {
            "description": "User or organisation does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/alerts": {
      "post": {
        "operationId": "postUserOrganisationAlert",
        "summary": "Create a new organisation's alert.",
        "tags": [
          "alerts"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The organisation's alert to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Alert"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created the organisation's alert",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertItem"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/devices": {
      "post": {
        "operationId": "postUserOrganisationDevice",
        "summary": "Setup a organisation's device.",
        "tags": [
          "devices"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The organisation device activation couple",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "identification": "RC000086",
                "activationCode": "YOLO"
              },
              "schema": {
                "type": "object",
                "required": [
                  "identification",
                  "activationCode"
                ],
                "properties": {
                  "identification": {
                    "type": "string"
                  },
                  "activationCode": {
                    "type": "string",
                    "pattern": "^[A-Z0-9]{4,}$"
                  },
                  "name": {
                    "type": "string"
                  },
                  "device": {
                    "type": "number",
                    "pattern": "^[0-9]+$",
                    "minimum": 1,
                    "description": "The device's id to replace"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The organisation's device created",
            "content": {
              "application/json": {
                "example": {
                  "item": 1664,
                  "devices": {
                    "1664": {
                      "id": 1664,
                      "identification": "RC000086",
                      "modelId": 7,
                      "organisationId": 1,
                      "city": "Lille",
                      "position": {
                        "latitude": 52.7552,
                        "longitude": 4.96973,
                        "altitude": 42,
                        "precision": 0,
                        "satellites": 7
                      },
                      "status": {
                        "firmware": "0.2.51",
                        "battery": 3520,
                        "signal": 41.57,
                        "lastLocationDate": "2019-04-11T00:01:35.000Z",
                        "lastRebootDate": "2019-04-05T03:37:08.000Z",
                        "lastMoveDate": "2019-04-10T15:07:34.000Z",
                        "lastStatusUpdateDate": "2019-04-19T06:38:00.000Z"
                      },
                      "accessPeriods": [
                        {
                          "id": 16641664,
                          "authorId": 1,
                          "granteeId": 1,
                          "sharingOrganisationId": 3,
                          "delegatorId": 4,
                          "organisationId": 1,
                          "parameters": {},
                          "type": "guest",
                          "startDate": "2019-03-20T06:27:44.000Z",
                          "endDate": "2019-04-04T07:08:12.000Z"
                        }
                      ],
                      "settings": {
                        "patchSmallRainFall": true
                      },
                      "calibrations": [],
                      "serial": "740101",
                      "contents": {
                        "name": "MIR"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DeviceItem"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/invitations": {
      "post": {
        "operationId": "postUserOrganisationInvitation",
        "summary": "Create an organisation's invitation.",
        "tags": [
          "invitations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The organisation's invitation to update",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "abbacaca-abba-abba-caca",
                "organisationId": 1,
                "authordId": 1,
                "status": "pending",
                "completionDate": "2019-01-01T00:00:00Z",
                "creationDate": "2019-01-01T00:00:00Z",
                "modificationDate": "2019-01-01T00:00:00Z",
                "contents": {
                  "recipientId": 3,
                  "type": "share",
                  "data": {
                    "type": "select",
                    "message": "Here are the stations we talk about",
                    "transmittable": false,
                    "devicesIds": [
                      301,
                      404
                    ],
                    "allowedDevicesIds": [
                      301,
                      404,
                      500
                    ],
                    "maximumSharedAccesses": 2
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully updated the organisation's invitation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationItem"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/members": {
      "post": {
        "operationId": "postUserOrganisationMember",
        "summary": "Add an member to an organisation",
        "tags": [
          "organisations",
          "members"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The type of relation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "type",
                  "email"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "owner",
                      "admin",
                      "collaborator"
                    ]
                  },
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user was successfully added to the organisation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "contents": {
                      "type": "object",
                      "properties": {
                        "organisationId": {
                          "type": "number"
                        },
                        "memberId": {
                          "type": "number"
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "owner",
                            "admin",
                            "collaborator"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/password": {
      "post": {
        "operationId": "postUserPassword",
        "summary": "Update user password",
        "tags": [
          "miscellaneous"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The infos to update the user password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "currentPassword",
                  "newPassword"
                ],
                "additionalProperties": false,
                "properties": {
                  "currentPassword": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Password updated"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/verify": {
      "post": {
        "operationId": "postVerify",
        "summary": "Verify a user",
        "tags": [
          "miscellaneous"
        ],
        "requestBody": {
          "description": "Verify the user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "verify"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "verify": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ]
      }
    },
    "/organisations/{organisationId}/devices/{deviceId}/calibration/{calibrationName}": {
      "put": {
        "operationId": "putOrganisationDeviceCalibration",
        "summary": "Update an organisation's device calibration.",
        "tags": [
          "devices"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "in": "path",
            "description": "Calibration to set",
            "name": "calibrationName",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "RAIN_FALL"
              ]
            }
          },
          {
            "in": "query",
            "description": "Ratio to set",
            "name": "ratio",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 0
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "201": {
            "description": "The organisation's device calibration has been updated"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/devices/{deviceId}/settings": {
      "put": {
        "operationId": "putOrganisationDeviceSettings",
        "summary": "Update an organisation's device's settings.",
        "tags": [
          "devices"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The organisation's device's settings",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "patchSmallRainFall": true
              },
              "schema": {
                "$ref": "#/components/schemas/DeviceSettings"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organisation's device's settings were sucessfully updated",
            "content": {
              "application/json": {
                "example": {
                  "patchSmallRainFall": true
                },
                "schema": {
                  "$ref": "#/components/schemas/DeviceSettings"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/places/{placeId}": {
      "put": {
        "operationId": "putOrganisationPlace",
        "summary": "Update a place for an organisation",
        "tags": [
          "organisations",
          "places"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/placeId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The necessary contents to update a place for an organisation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Place"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The place were updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceItem"
                }
              }
            }
          },
          "404": {
            "description": "Place or organisation does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/trial": {
      "put": {
        "operationId": "putOrganisationTrial",
        "summary": "Change trial for an organisation",
        "tags": [
          "organisations"
        ],
        "security": [
          {
            "bearerAuth": [
              "team"
            ]
          },
          {
            "accessTokenAuth": [
              "team"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "Edit of the trial payload",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "endDate": "2021-01-29T00:00:00.0000",
                "reason": "He is a very kind farmer"
              },
              "schema": {
                "type": "object",
                "required": [
                  "endDate"
                ],
                "additionalProperties": false,
                "properties": {
                  "reason": {
                    "type": "string"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organisation trial has been updated"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/partners/{partnerId}/users/{partnerUserId}/devices/{deviceId}/modules/{moduleId}/parameters": {
      "put": {
        "operationId": "putPartnerModuleParameters",
        "summary": "Update an partner module parameters",
        "tags": [
          "partners",
          "partnerAccess"
        ],
        "security": [
          {
            "bearerAuth": [
              "partner"
            ]
          },
          {
            "accessTokenAuth": [
              "partner"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/partnerId"
          },
          {
            "in": "path",
            "required": true,
            "description": "The partner user id",
            "name": "partnerUserId",
            "schema": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            }
          },
          {
            "$ref": "#/components/parameters/deviceId"
          },
          {
            "$ref": "#/components/parameters/moduleId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The module parameters",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Module sucessfully updated on the user device",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/password": {
      "put": {
        "operationId": "putPassword",
        "summary": "Change a user password",
        "tags": [
          "miscellaneous"
        ],
        "requestBody": {
          "description": "The infos to change the password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "lostToken",
                  "newPassword"
                ],
                "additionalProperties": false,
                "properties": {
                  "lostToken": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Password changed"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ]
      }
    },
    "/users/{userId}/FCMToken": {
      "put": {
        "operationId": "putUserFCMToken",
        "summary": "Update Firebase Cloud Messaging token for an user",
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The FCM token",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "FCMToken",
                  "device"
                ],
                "properties": {
                  "FCMToken": {
                    "type": "string"
                  },
                  "device": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully updated the FCM token for this user"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/invitations/{invitationId}/answer": {
      "put": {
        "operationId": "putUserInvitationAnswer",
        "summary": "Set a user's invitation answer.",
        "tags": [
          "invitations"
        ],
        "security": [
          {
            "bearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "$ref": "#/components/parameters/invitationId"
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The answer",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "answer": "accept",
                "organisationId": 2
              },
              "schema": {
                "type": "object",
                "required": [
                  "answer"
                ],
                "additionalProperties": false,
                "properties": {
                  "organisationId": {
                    "type": "number",
                    "pattern": "^[0-9]+$",
                    "minimum": 1
                  },
                  "answer": {
                    "type": "string",
                    "enum": [
                      "accept",
                      "decline"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user's answer is set"
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/graphql": {
      "get": {
        "operationId": "getGraphQL",
        "summary": "Graphql endpoint",
        "tags": [
          "graphql"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "The GraphQL query",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "The GraphQL variables",
            "name": "variables",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "The GraphQL operation name",
            "name": "operationName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully ran the GraphQL query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "maybeBearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ]
      },
      "post": {
        "operationId": "postGraphQL",
        "summary": "Graphql endpoint",
        "tags": [
          "graphql"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Authorization with Bearer mecanism",
            "schema": {
              "type": "string",
              "pattern": "^((B|b)earer|Once) ((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "in": "query",
            "name": "access_token",
            "description": "Token provided through query parameters",
            "schema": {
              "type": "string",
              "pattern": "^((?:\\d+-\\d+-[A-Z_]+)|(?:[0-9a-zA-Z]+)|([A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*))$"
            }
          },
          {
            "$ref": "#/components/parameters/xApiVersion"
          },
          {
            "$ref": "#/components/parameters/xSdkVersion"
          },
          {
            "$ref": "#/components/parameters/xAppVersion"
          }
        ],
        "requestBody": {
          "description": "The GraphQL query",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "properties": {
                  "query": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully ran the GraphQL query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          "default": {
            "description": "API error",
            "content": {
              "application/json": {
                "example": {
                  "code": "E_UNEXPECTED",
                  "transactionId": "abbacaca-abba-caca-abba-cacaabbacaca"
                },
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "maybeBearerAuth": [
              "user"
            ]
          },
          {
            "accessTokenAuth": [
              "user"
            ]
          },
          {
            "fakeAuth": [
              "admin"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CropContents": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Crop": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "id": {
            "type": "number",
            "pattern": "^[0-9]+$"
          },
          "hits": {
            "type": "number"
          },
          "contents": {
            "$ref": "#/components/schemas/CropContents"
          }
        }
      },
      "CropHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9]+$": {
            "$ref": "#/components/schemas/Crop"
          }
        }
      },
      "CropItem": {
        "type": "object",
        "required": [
          "item",
          "crops"
        ],
        "properties": {
          "item": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "crops": {
            "$ref": "#/components/schemas/CropHash"
          }
        }
      },
      "CropsItems": {
        "type": "object",
        "required": [
          "items",
          "crops"
        ],
        "properties": {
          "crops": {
            "$ref": "#/components/schemas/CropHash"
          },
          "items": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$"
            }
          }
        }
      },
      "DeviceStatistics": {
        "type": "object",
        "required": [
          "item",
          "models",
          "devices",
          "measures"
        ],
        "properties": {
          "models": {
            "$ref": "#/components/schemas/ModelHash"
          },
          "devices": {
            "$ref": "#/components/schemas/GenericDeviceHash"
          },
          "item": {
            "type": "string",
            "pattern": "^[0-9]+$"
          },
          "measures": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "key": {
                  "type": "number"
                },
                "docCount": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "ModelContents": {
        "type": "object",
        "required": [
          "name",
          "conception",
          "manufacturing",
          "calibration",
          "weight"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "externalDiameter": {
            "type": "number"
          },
          "conception": {
            "type": "string"
          },
          "manufacturing": {
            "type": "string"
          },
          "calibration": {
            "type": "string"
          },
          "height": {
            "type": "number"
          },
          "weight": {
            "type": "number"
          }
        }
      },
      "Model": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "id": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "contents": {
            "$ref": "#/components/schemas/ModelContents"
          }
        }
      },
      "ModelHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9]+$": {
            "$ref": "#/components/schemas/Model"
          }
        }
      },
      "DeviceStatusContents": {
        "type": "object",
        "required": [
          "firmware",
          "battery",
          "lqi",
          "latitude",
          "longitude",
          "altitude",
          "locationSatellites",
          "locationPrecision",
          "lastLocationDate",
          "lastLocationFailureDate",
          "lastMoveDate",
          "lastRebootDate",
          "lastStatusUpdateDate"
        ],
        "properties": {
          "firmware": {
            "type": "string"
          },
          "battery": {
            "type": "number"
          },
          "lqi": {
            "type": "string"
          },
          "latitude": {
            "minimum": -90,
            "maximum": 90,
            "type": "number"
          },
          "longitude": {
            "minimum": -180,
            "maximum": 180,
            "type": "number"
          },
          "altitude": {
            "type": "number"
          },
          "locationSatellites": {
            "type": "number"
          },
          "locationPrecision": {
            "type": "number"
          },
          "lastLocationDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastLocationFailureDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastRebootDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastMoveDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastStatusUpdateDate": {
            "type": "string",
            "format": "date-time"
          },
          "activationDate": {
            "type": "string",
            "format": "date-time"
          },
          "manufacturedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DeviceStatus": {
        "description": "Deprecated. Use devices roperties directly.",
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "id": {
            "type": "number",
            "pattern": "^[0-9]+$"
          },
          "contents": {
            "$ref": "#/components/schemas/DeviceStatusContents"
          }
        }
      },
      "DeviceStatusHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9]+$": {
            "$ref": "#/components/schemas/DeviceStatus"
          }
        }
      },
      "DeviceSummary": {
        "type": "object",
        "patternProperties": {
          "^(RELATIVE_HUMIDITY|TEMPERATURE|WET_TEMPERATURE|RAIN_FALL|WIND_SPEED|WIND_GUST|WIND_DIRECTION|MOVE|LEAF_SENSOR_CONDUCTIVITY|RH_AIR_H1|TEMP_AIR_H1|RAIN_TIC|WIND_MEAN|WIND_MAX)$": {
            "type": "object",
            "required": [
              "lastMeasure"
            ],
            "properties": {
              "date": {
                "type": "string",
                "format": "date-time"
              },
              "lastMeasure": {
                "type": "number"
              },
              "lastHour": {
                "type": "number"
              },
              "last3Hours": {
                "type": "number"
              },
              "lastDay": {
                "type": "number"
              },
              "lastWeek": {
                "type": "number"
              }
            }
          }
        }
      },
      "DeviceSummaryHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9]+$": {
            "$ref": "#/components/schemas/DeviceSummary"
          }
        }
      },
      "DeviceSettings": {
        "type": "object",
        "properties": {
          "patchSmallRainFall": {
            "type": "boolean"
          }
        }
      },
      "DeviceContents": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Deprecated, use the `name` in `accessPeriods` instead."
          }
        }
      },
      "LimitedDevice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "identification": {
            "type": "string"
          },
          "modelId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "organisationId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "city": {
            "type": "string"
          },
          "location": {
            "type": "object",
            "required": [
              "latitude",
              "longitude",
              "altitude",
              "satellites",
              "precision"
            ],
            "properties": {
              "latitude": {
                "minimum": -90,
                "maximum": 90,
                "type": "number"
              },
              "longitude": {
                "minimum": -180,
                "maximum": 180,
                "type": "number"
              },
              "altitude": {
                "type": "number"
              },
              "satellites": {
                "type": "number"
              },
              "precision": {
                "type": "number"
              },
              "source": {
                "type": "string",
                "enum": [
                  "gps",
                  "blur"
                ]
              }
            }
          },
          "status": {
            "type": "object",
            "required": [
              "firmware",
              "battery",
              "signal",
              "lastLocationDate",
              "lastLocationFailureDate",
              "lastMoveDate",
              "lastRebootDate",
              "lastStatusUpdateDate"
            ],
            "properties": {
              "firmware": {
                "type": "string"
              },
              "battery": {
                "type": "number"
              },
              "signal": {
                "type": "number"
              },
              "lastLocationDate": {
                "type": "string",
                "format": "date-time"
              },
              "lastLocationFailureDate": {
                "type": "string",
                "format": "date-time"
              },
              "lastRebootDate": {
                "type": "string",
                "format": "date-time"
              },
              "lastMoveDate": {
                "type": "string",
                "format": "date-time"
              },
              "lastStatusUpdateDate": {
                "type": "string",
                "format": "date-time"
              },
              "activationDate": {
                "type": "string",
                "format": "date-time"
              },
              "manufacturedDate": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "Device": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "id": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "identification": {
            "type": "string"
          },
          "modelId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "organisationId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "city": {
            "type": "string"
          },
          "location": {
            "type": "object",
            "required": [
              "latitude",
              "longitude",
              "altitude",
              "satellites",
              "precision"
            ],
            "properties": {
              "latitude": {
                "minimum": -90,
                "maximum": 90,
                "type": "number"
              },
              "longitude": {
                "minimum": -180,
                "maximum": 180,
                "type": "number"
              },
              "altitude": {
                "type": "number"
              },
              "satellites": {
                "type": "number"
              },
              "precision": {
                "type": "number"
              },
              "source": {
                "type": "string",
                "enum": [
                  "gps",
                  "blur"
                ]
              }
            }
          },
          "status": {
            "type": "object",
            "required": [
              "firmware",
              "battery",
              "signal",
              "lastLocationDate",
              "lastLocationFailureDate",
              "lastMoveDate",
              "lastRebootDate",
              "lastStatusUpdateDate"
            ],
            "properties": {
              "firmware": {
                "type": "string"
              },
              "battery": {
                "type": "number"
              },
              "signal": {
                "type": "number"
              },
              "lastLocationDate": {
                "type": "string",
                "format": "date-time"
              },
              "lastLocationFailureDate": {
                "type": "string",
                "format": "date-time"
              },
              "lastRebootDate": {
                "type": "string",
                "format": "date-time"
              },
              "lastMoveDate": {
                "type": "string",
                "format": "date-time"
              },
              "lastStatusUpdateDate": {
                "type": "string",
                "format": "date-time"
              },
              "activationDate": {
                "type": "string",
                "format": "date-time"
              },
              "manufacturedDate": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "contents": {
            "$ref": "#/components/schemas/DeviceContents"
          },
          "settings": {
            "$ref": "#/components/schemas/DeviceSettings"
          },
          "accessPeriods": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "deviceId",
                "authorId",
                "sharingOrganisationId",
                "granteeId",
                "type",
                "startDate",
                "endDate"
              ],
              "properties": {
                "deviceId": {
                  "type": "number",
                  "pattern": "^[0-9]+$",
                  "minimum": 1
                },
                "moduleId": {
                  "type": "number",
                  "pattern": "^[0-9]+$",
                  "minimum": 1
                },
                "authorId": {
                  "type": "number",
                  "pattern": "^[0-9]+$",
                  "minimum": 1
                },
                "sharingOrganisationId": {
                  "type": "number",
                  "pattern": "^[0-9]+$",
                  "minimum": 1
                },
                "granteeId": {
                  "type": "number",
                  "pattern": "^[0-9]+$",
                  "minimum": 1
                },
                "delegatorId": {
                  "type": "number",
                  "pattern": "^[0-9]+$",
                  "minimum": 1
                },
                "organisationId": {
                  "type": "number",
                  "pattern": "^[0-9]+$",
                  "minimum": 1
                },
                "userId": {
                  "type": "number",
                  "pattern": "^[0-9]+$",
                  "minimum": 1
                },
                "parameters": {
                  "type": "object",
                  "additionalProperties": true
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "owner",
                    "user",
                    "guest",
                    "collaborator",
                    "partner"
                  ]
                },
                "situation": {
                  "type": "string",
                  "enum": [
                    "UNKNOWN",
                    "GREENHOUSE",
                    "OUTDOOR_COVERED",
                    "OUTDOOR_INFLUENCED",
                    "OUTDOOR_ISOLATED"
                  ]
                },
                "startDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "endDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "deletionDate": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "calibrations": {
            "type": "object",
            "patternProperties": {
              "^(RELATIVE_HUMIDITY|TEMPERATURE|WET_TEMPERATURE|RAIN_FALL|WIND_SPEED|WIND_GUST|WIND_DIRECTION|MOVE|LEAF_SENSOR_CONDUCTIVITY|RH_AIR_H1|TEMP_AIR_H1|RAIN_TIC|WIND_MEAN|WIND_MAX)$": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "lastMeasure"
                  ],
                  "properties": {
                    "startDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "ratio": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "serial": {
            "type": "string",
            "pattern": "^[0-F]+$"
          },
          "userId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          }
        }
      },
      "GenericDevice": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Device"
          },
          {
            "$ref": "#/components/schemas/LimitedDevice"
          }
        ]
      },
      "GenericDeviceHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9]+$": {
            "$ref": "#/components/schemas/GenericDevice"
          }
        }
      },
      "DevicesItems": {
        "type": "object",
        "required": [
          "items",
          "models",
          "devices",
          "devicesStatuses",
          "devicesSummaries"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "total": {
            "type": "number",
            "minimum": 0
          },
          "models": {
            "$ref": "#/components/schemas/ModelHash"
          },
          "devicesStatuses": {
            "$ref": "#/components/schemas/DeviceStatusHash"
          },
          "devicesSummaries": {
            "$ref": "#/components/schemas/DeviceSummaryHash"
          },
          "devices": {
            "$ref": "#/components/schemas/GenericDeviceHash"
          }
        }
      },
      "DeviceItem": {
        "type": "object",
        "required": [
          "item",
          "models",
          "devices",
          "devicesStatuses"
        ],
        "properties": {
          "item": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "models": {
            "$ref": "#/components/schemas/ModelHash"
          },
          "devicesStatuses": {
            "$ref": "#/components/schemas/DeviceStatusHash"
          },
          "devices": {
            "$ref": "#/components/schemas/GenericDeviceHash"
          }
        }
      },
      "DeviceSummaryItem": {
        "type": "object",
        "required": [
          "item",
          "models",
          "devices",
          "devicesSummaries"
        ],
        "properties": {
          "models": {
            "$ref": "#/components/schemas/ModelHash"
          },
          "devices": {
            "$ref": "#/components/schemas/GenericDeviceHash"
          },
          "devicesSummaries": {
            "$ref": "#/components/schemas/DeviceSummaryHash"
          },
          "item": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          }
        }
      },
      "ModuleContents": {
        "type": "object",
        "required": [
          "name",
          "code",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "email",
              "ftp",
              "partner",
              "s3"
            ]
          }
        }
      },
      "Module": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "id": {
            "type": "number",
            "pattern": "^[0-9]+$"
          },
          "organisationId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "contents": {
            "$ref": "#/components/schemas/ModuleContents"
          }
        }
      },
      "ModuleHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9]+$": {
            "$ref": "#/components/schemas/Module"
          }
        }
      },
      "ModuleItems": {
        "type": "object",
        "required": [
          "items",
          "modules"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "modules": {
            "$ref": "#/components/schemas/ModuleHash"
          }
        }
      },
      "ModuleItem": {
        "type": "object",
        "required": [
          "item",
          "modules"
        ],
        "properties": {
          "item": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "modules": {
            "$ref": "#/components/schemas/ModuleHash"
          },
          "organisations": {
            "$ref": "#/components/schemas/OrganisationHash"
          }
        }
      },
      "OrderContents": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "customer",
          "shippingAddress",
          "products"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "awaiting_shipment",
              "on_hold",
              "delivered",
              "shipped",
              "partially_delivered",
              "returned"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "unknown",
              "promoting_farmer",
              "replacement",
              "spare_parts",
              "mono_point",
              "functional_demo_stations",
              "non_functional_demo_stations",
              "remote_stock",
              "leafcrop_recall"
            ]
          },
          "hubspotTicketId": {
            "description": "This is used to update the ticket status and post a comment with order recap",
            "type": "string"
          },
          "hubspotDealId": {
            "description": "This is used to track the deal linked to a promoting farmer",
            "type": "string"
          },
          "operationId": {
            "description": "This is used to combine multiple orders in one",
            "type": "string"
          },
          "device": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "customer": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "email",
              "firstname",
              "lastname",
              "phone",
              "locale"
            ],
            "properties": {
              "email": {
                "type": "string",
                "format": "email"
              },
              "firstname": {
                "type": "string"
              },
              "lastname": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "locale": {
                "type": "string",
                "pattern": "^[a-z]{2}(-[A-Z]{2,3})?$",
                "maxLength": 5
              },
              "chargebeeCustomerId": {
                "type": "string"
              }
            }
          },
          "company": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string"
              }
            }
          },
          "shippingAddress": {
            "type": "object",
            "required": [
              "line1",
              "city",
              "zip",
              "country"
            ],
            "additionalProperties": false,
            "properties": {
              "line1": {
                "type": "string"
              },
              "line2": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "zip": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "firstname": {
                "type": "string"
              },
              "lastname": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "company": {
                "type": "string"
              }
            }
          },
          "billingAddress": {
            "type": "object",
            "required": [
              "line1",
              "city",
              "zip",
              "country"
            ],
            "additionalProperties": false,
            "properties": {
              "line1": {
                "type": "string"
              },
              "line2": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "zip": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "firstname": {
                "type": "string"
              },
              "lastname": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "company": {
                "type": "string"
              }
            }
          },
          "products": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "sku",
                "quantity"
              ],
              "properties": {
                "sku": {
                  "type": "string"
                },
                "quantity": {
                  "type": "number"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Order": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "contents"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "source": {
            "type": "string",
            "enum": [
              "chargebee",
              "manual"
            ]
          },
          "invoiceId": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "contents": {
            "$ref": "#/components/schemas/OrderContents"
          }
        }
      },
      "OrderHash": {
        "type": "object",
        "patternProperties": {
          "undefined": {
            "$ref": "#/components/schemas/Order"
          }
        }
      },
      "OrderItem": {
        "type": "object",
        "required": [
          "item",
          "orders"
        ],
        "properties": {
          "item": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "orders": {
            "$ref": "#/components/schemas/OrderHash"
          }
        }
      },
      "OrderItems": {
        "type": "object",
        "required": [
          "items",
          "orders"
        ],
        "properties": {
          "items": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "itemsManuals": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "itemsChargebee": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          },
          "orders": {
            "$ref": "#/components/schemas/OrderHash"
          }
        }
      },
      "OrganisationPlan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "trialEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "in_trial",
              "active",
              "non_renewing",
              "active_waiting_chargebee",
              "paused",
              "cancelled",
              "deleted"
            ]
          },
          "renewalDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrganisationLimits": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "maxDevices": {
            "type": "number"
          },
          "maxDevicesNetworkOverride": {
            "type": "number"
          },
          "maxHistoryAccessPeriod": {
            "type": "string"
          },
          "maxExportPeriod": {
            "type": "string"
          },
          "maxLiveWeatherPeriod": {
            "type": "string"
          },
          "dst": {
            "type": "boolean"
          },
          "maxMembersOrganisation": {
            "type": "number"
          }
        }
      },
      "OrganisationContents": {
        "type": "object",
        "required": [
          "name",
          "locale",
          "timeZone",
          "type"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "locale": {
            "type": "string",
            "pattern": "^[a-z]{2}(-[A-Z]{2,3})?$",
            "maxLength": 5
          },
          "timeZone": {
            "type": "string",
            "pattern": "^[a-zA-Z]+/[a-zA-Z]+|UTC|GMT$",
            "maxLength": 50
          },
          "identification": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "farm",
              "cooperative",
              "interest_group",
              "chamber_of_agriculture",
              "company",
              "personal",
              "public_agency"
            ]
          },
          "typeFarm": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "agricultural",
                "wine",
                "arboreal",
                "vegetable",
                "apiarian"
              ]
            }
          },
          "area": {
            "type": "number"
          },
          "crops": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "apple",
                "banana",
                "barley",
                "bean",
                "beet",
                "cabbage",
                "carrot",
                "colza",
                "corn",
                "garden",
                "garlic",
                "greenhouse",
                "lettuce",
                "linen",
                "oat",
                "onion",
                "other_fruits",
                "other_vegetables",
                "other-agri",
                "other-tree",
                "pea",
                "peach",
                "pear",
                "potato",
                "potatoes",
                "rapeseed",
                "rye",
                "sunflower",
                "tomato",
                "vine",
                "wheat",
                "wine"
              ]
            }
          },
          "irrigation": {
            "type": "boolean"
          },
          "logoUrl": {
            "type": "string"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Organisation": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "contents"
        ],
        "properties": {
          "id": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "uuid": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|[0-9]+$"
          },
          "ownersIds": {
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 1,
            "uniqueItems": true
          },
          "isNetwork": {
            "type": "boolean"
          },
          "contents": {
            "$ref": "#/components/schemas/OrganisationContents"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "modificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "plan": {
            "$ref": "#/components/schemas/OrganisationPlan"
          },
          "limits": {
            "$ref": "#/components/schemas/OrganisationLimits"
          },
          "referralStatus": {
            "type": "string",
            "enum": [
              "PENDING",
              "VALIDATED"
            ]
          }
        }
      },
      "OrganisationHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9]+$": {
            "$ref": "#/components/schemas/Organisation"
          }
        }
      },
      "OrganisationItem": {
        "type": "object",
        "required": [
          "item",
          "organisations"
        ],
        "properties": {
          "item": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "organisations": {
            "$ref": "#/components/schemas/OrganisationHash"
          }
        }
      },
      "OrganisationItems": {
        "type": "object",
        "required": [
          "items",
          "organisations"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "organisations": {
            "$ref": "#/components/schemas/OrganisationHash"
          }
        }
      },
      "DeviceLiveAggregation": {
        "type": "object",
        "additionalProperties": false,
        "patternProperties": {
          "RELATIVE_HUMIDITY_MEAN|RELATIVE_HUMIDITY_MIN|RELATIVE_HUMIDITY_MAX|RELATIVE_HUMIDITY_INTERPOLATED|RELATIVE_HUMIDITY_LAST|TEMPERATURE_MEAN|TEMPERATURE_MIN|TEMPERATURE_MAX|TEMPERATURE_INTERPOLATED|TEMPERATURE_LAST|WET_TEMPERATURE_MEAN|WET_TEMPERATURE_MIN|WET_TEMPERATURE_MAX|WET_TEMPERATURE_INTERPOLATED|WET_TEMPERATURE_LAST|RAIN_FALL_MEAN_SUM|RAIN_FALL_MEAN_SUM_ADJUSTED|RAIN_FALL_SUM|RAIN_FALL_MIN|RAIN_FALL_MIN_SUM|RAIN_FALL_MAX|RAIN_FALL_MAX_SUM|MOVE_SUM|INIT_SUM|WIND_SPEED_MEAN|WIND_SPEED_MIN|WIND_SPEED_MAX|WIND_SPEED_INTERPOLATED|WIND_SPEED_LAST|WIND_GUST_MEAN|WIND_GUST_MIN|WIND_GUST_MAX|WIND_GUST_INTERPOLATED|WIND_GUST_LAST|WIND_DIRECTION_MEAN|DEGREE_DAY|COLD_HOURS|LEAF_SENSOR_CONDUCTIVITY_MIN|LEAF_SENSOR_CONDUCTIVITY_MAX|LEAF_SENSOR_CONDUCTIVITY_MEAN|LEAF_WETNESS|IRRADIANCE_MEAN|LEAF_WETNESS_MEDIUM|LEAF_WETNESS_HIGH": {
            "type": "object",
            "patternProperties": {
              "current|one_hour|three_hours|one_day|one_week|today|yesterday|this_week|last_seven_days": {
                "type": "number"
              }
            }
          }
        }
      },
      "DeviceLiveAggregationHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9]+$": {
            "$ref": "#/components/schemas/DeviceLiveAggregation"
          }
        }
      },
      "DeviceLiveAggregationItems": {
        "type": "object",
        "required": [
          "items",
          "devicesLiveAggregations"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "devicesLiveAggregations": {
            "$ref": "#/components/schemas/DeviceLiveAggregationHash"
          }
        }
      },
      "InvitationContents": {
        "oneOf": [
          {
            "type": "object",
            "description": "Share type invitation",
            "required": [
              "recipientId",
              "type",
              "data"
            ],
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "share"
                ]
              },
              "data": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "transmittable",
                      "devicesIds"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of share",
                        "enum": [
                          "set"
                        ]
                      },
                      "transmittable": {
                        "type": "boolean",
                        "description": "Allows the grantee to expose the devices in his own network"
                      },
                      "message": {
                        "type": "string",
                        "description": "A message from the author to the recipient"
                      },
                      "devicesIds": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "pattern": "^[0-9]+$",
                          "minimum": 1
                        },
                        "minItems": 1,
                        "uniqueItems": true,
                        "description": "List of devices shared"
                      },
                      "planId": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "transmittable",
                      "devicesIds"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of share",
                        "enum": [
                          "select"
                        ]
                      },
                      "transmittable": {
                        "type": "boolean",
                        "description": "Allows the grantee to expose the devices in his own network"
                      },
                      "message": {
                        "type": "string",
                        "description": "A message from the author to the recipient"
                      },
                      "devicesIds": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "pattern": "^[0-9]+$",
                          "minimum": 1
                        },
                        "minItems": 0,
                        "uniqueItems": true,
                        "description": "List of devices selected"
                      },
                      "allowedDevicesIds": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "pattern": "^[0-9]+$",
                          "minimum": 1
                        },
                        "minItems": 1,
                        "uniqueItems": true,
                        "description": "List of devices that the grantee could pick. No value means all owned devices allowed."
                      },
                      "maximumSharedAccesses": {
                        "description": "Number of devices permitted. No value means unlimited.",
                        "type": "number",
                        "minimum": 1
                      },
                      "planId": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "recipientId": {
                "type": "number",
                "pattern": "^[0-9]+$",
                "minimum": 1
              }
            }
          },
          {
            "type": "object",
            "description": "Share type invitation",
            "required": [
              "recipient",
              "type",
              "data"
            ],
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "share"
                ]
              },
              "data": {
                "oneOf": [
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "transmittable",
                      "devicesIds"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of share",
                        "enum": [
                          "set"
                        ]
                      },
                      "transmittable": {
                        "type": "boolean",
                        "description": "Allows the grantee to expose the devices in his own network"
                      },
                      "message": {
                        "type": "string",
                        "description": "A message from the author to the recipient"
                      },
                      "devicesIds": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "pattern": "^[0-9]+$",
                          "minimum": 1
                        },
                        "minItems": 1,
                        "uniqueItems": true,
                        "description": "List of devices shared"
                      },
                      "planId": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "type",
                      "transmittable",
                      "devicesIds"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of share",
                        "enum": [
                          "select"
                        ]
                      },
                      "transmittable": {
                        "type": "boolean",
                        "description": "Allows the grantee to expose the devices in his own network"
                      },
                      "message": {
                        "type": "string",
                        "description": "A message from the author to the recipient"
                      },
                      "devicesIds": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "pattern": "^[0-9]+$",
                          "minimum": 1
                        },
                        "minItems": 0,
                        "uniqueItems": true,
                        "description": "List of devices selected"
                      },
                      "allowedDevicesIds": {
                        "type": "array",
                        "items": {
                          "type": "number",
                          "pattern": "^[0-9]+$",
                          "minimum": 1
                        },
                        "minItems": 1,
                        "uniqueItems": true,
                        "description": "List of devices that the grantee could pick. No value means all owned devices allowed."
                      },
                      "maximumSharedAccesses": {
                        "description": "Number of devices permitted. No value means unlimited.",
                        "type": "number",
                        "minimum": 1
                      },
                      "planId": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "recipient": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          {
            "type": "object",
            "description": "Member type invitation",
            "required": [
              "type",
              "recipient",
              "data"
            ],
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "member"
                ]
              },
              "recipient": {
                "$ref": "#/components/schemas/User"
              },
              "data": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "owner",
                      "admin",
                      "collaborator"
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "Invitation": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "organisationId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "authordId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "accepted",
              "declined"
            ]
          },
          "completionDate": {
            "type": "string",
            "format": "date-time"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "modificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "contents": {
            "$ref": "#/components/schemas/InvitationContents"
          }
        }
      },
      "InvitationHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/Invitation"
          }
        }
      },
      "InvitationItem": {
        "type": "object",
        "required": [
          "item",
          "invitations"
        ],
        "properties": {
          "item": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "invitations": {
            "$ref": "#/components/schemas/InvitationHash"
          }
        }
      },
      "InvitationItems": {
        "type": "object",
        "required": [
          "items",
          "invitations"
        ],
        "properties": {
          "invitations": {
            "$ref": "#/components/schemas/InvitationHash"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            "minItems": 0,
            "uniqueItems": true
          }
        }
      },
      "NetworkDevicesItems": {
        "type": "object",
        "required": [
          "items",
          "devices",
          "organisations"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "total": {
            "type": "number",
            "minimum": 0
          },
          "devices": {
            "$ref": "#/components/schemas/GenericDeviceHash"
          },
          "organisations": {
            "$ref": "#/components/schemas/OrganisationHash"
          }
        }
      },
      "Network": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "organisationId",
          "name",
          "type",
          "preferences"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|[0-9]+$"
          },
          "organisationId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "open",
              "private"
            ]
          },
          "preferences": {
            "$ref": "#/components/schemas/OrganisationPreferences"
          },
          "devicesCount": {
            "type": "number"
          },
          "selectSharesCount": {
            "type": "number"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "modificationDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NetworkHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|[0-9]+$": {
            "$ref": "#/components/schemas/Network"
          }
        }
      },
      "NetworkItem": {
        "type": "object",
        "required": [
          "item",
          "networks"
        ],
        "properties": {
          "item": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|[0-9]+$"
          },
          "networks": {
            "$ref": "#/components/schemas/NetworkHash"
          }
        }
      },
      "NetworksItems": {
        "type": "object",
        "required": [
          "items",
          "networks"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|[0-9]+$"
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "networks": {
            "$ref": "#/components/schemas/NetworkHash"
          }
        }
      },
      "OrganisationPreferences": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "accessLevelNetwork": {
            "type": "string",
            "enum": [
              "demand",
              "invitation",
              "freely"
            ]
          },
          "transmittableNetwork": {
            "type": "boolean"
          }
        }
      },
      "ShareContents": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "recipientId",
              "type",
              "transmittable",
              "devicesIds"
            ],
            "additionalProperties": false,
            "properties": {
              "recipientId": {
                "type": "number",
                "pattern": "^[0-9]+$",
                "minimum": 1,
                "description": "User id of the share message recipient"
              },
              "type": {
                "type": "string",
                "description": "The type of share",
                "enum": [
                  "set"
                ]
              },
              "transmittable": {
                "type": "boolean",
                "description": "Allows the grantee to expose the devices in his own network"
              },
              "message": {
                "type": "string",
                "description": "A message from the author to the recipient"
              },
              "devicesIds": {
                "type": "array",
                "items": {
                  "type": "number",
                  "pattern": "^[0-9]+$",
                  "minimum": 1
                },
                "minItems": 1,
                "uniqueItems": true,
                "description": "List of devices shared"
              }
            },
            "description": "Share with fixed devices set"
          },
          {
            "type": "object",
            "required": [
              "recipientId",
              "type",
              "transmittable",
              "devicesIds"
            ],
            "additionalProperties": false,
            "properties": {
              "recipientId": {
                "type": "number",
                "pattern": "^[0-9]+$",
                "minimum": 1,
                "description": "User id of the share message recipient"
              },
              "type": {
                "type": "string",
                "description": "The type of share",
                "enum": [
                  "select"
                ]
              },
              "transmittable": {
                "type": "boolean",
                "description": "Allows the grantee to expose the devices in his own network"
              },
              "message": {
                "type": "string",
                "description": "A message from the author to the recipient"
              },
              "devicesIds": {
                "type": "array",
                "items": {
                  "type": "number",
                  "pattern": "^[0-9]+$",
                  "minimum": 1
                },
                "minItems": 0,
                "uniqueItems": true,
                "description": "List of devices selected"
              },
              "allowedDevicesIds": {
                "type": "array",
                "items": {
                  "type": "number",
                  "pattern": "^[0-9]+$",
                  "minimum": 1
                },
                "minItems": 1,
                "uniqueItems": true,
                "description": "List of devices that the grantee could pick. No value means all owned devices allowed."
              },
              "maximumSharedAccesses": {
                "description": "Number of devices permitted. No value means unlimited.",
                "type": "number",
                "minimum": 1
              }
            },
            "description": "Share with a devices set modifiable by the grantee"
          }
        ]
      },
      "Shares": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9]+_[0-9]+$",
            "minimum": 1
          },
          "authorId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "description": "User id of the person that created the share"
          },
          "sharingOrganisationId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "granteeId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "description": "Organisation id of the share grantee"
          },
          "contents": {
            "$ref": "#/components/schemas/ShareContents"
          }
        }
      },
      "SharesHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9]+_[0-9]+$": {
            "$ref": "#/components/schemas/Shares"
          }
        }
      },
      "SharesItem": {
        "type": "object",
        "required": [
          "item",
          "shares"
        ],
        "properties": {
          "item": {
            "type": "string",
            "pattern": "^[0-9]+_[0-9]+$",
            "minimum": 1
          },
          "shares": {
            "$ref": "#/components/schemas/SharesHash"
          },
          "organisations": {
            "$ref": "#/components/schemas/OrganisationHash"
          },
          "users": {
            "$ref": "#/components/schemas/UserHash"
          },
          "places": {
            "$ref": "#/components/schemas/PlaceHash"
          }
        }
      },
      "SharesItems": {
        "type": "object",
        "required": [
          "total",
          "items",
          "shares"
        ],
        "properties": {
          "total": {
            "type": "number"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9]+_[0-9]+$",
              "minimum": 1
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "shares": {
            "$ref": "#/components/schemas/SharesHash"
          },
          "organisations": {
            "$ref": "#/components/schemas/OrganisationHash"
          },
          "users": {
            "$ref": "#/components/schemas/UserHash"
          },
          "places": {
            "$ref": "#/components/schemas/PlaceHash"
          }
        }
      },
      "PartnerDevicesItems": {
        "type": "object",
        "required": [
          "items",
          "models",
          "devices",
          "devicesStatuses",
          "organisations",
          "users"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "total": {
            "type": "number",
            "minimum": 0
          },
          "models": {
            "$ref": "#/components/schemas/ModelHash"
          },
          "devicesStatuses": {
            "$ref": "#/components/schemas/DeviceStatusHash"
          },
          "devices": {
            "$ref": "#/components/schemas/GenericDeviceHash"
          },
          "users": {
            "$ref": "#/components/schemas/UserHash"
          },
          "organisations": {
            "$ref": "#/components/schemas/OrganisationHash"
          }
        }
      },
      "WeatherLiveAggregation": {
        "type": "object",
        "additionalProperties": false,
        "patternProperties": {
          "RELATIVE_HUMIDITY_MEAN|RELATIVE_HUMIDITY_MIN|RELATIVE_HUMIDITY_MAX|RELATIVE_HUMIDITY_INTERPOLATED|RELATIVE_HUMIDITY_LAST|TEMPERATURE_MEAN|TEMPERATURE_MIN|TEMPERATURE_MAX|TEMPERATURE_INTERPOLATED|TEMPERATURE_LAST|WET_TEMPERATURE_MEAN|WET_TEMPERATURE_MIN|WET_TEMPERATURE_MAX|WET_TEMPERATURE_INTERPOLATED|WET_TEMPERATURE_LAST|RAIN_FALL_MEAN_SUM|RAIN_FALL_MEAN_SUM_ADJUSTED|RAIN_FALL_SUM|RAIN_FALL_MIN|RAIN_FALL_MIN_SUM|RAIN_FALL_MAX|RAIN_FALL_MAX_SUM|MOVE_SUM|INIT_SUM|WIND_SPEED_MEAN|WIND_SPEED_MIN|WIND_SPEED_MAX|WIND_SPEED_INTERPOLATED|WIND_SPEED_LAST|WIND_GUST_MEAN|WIND_GUST_MIN|WIND_GUST_MAX|WIND_GUST_INTERPOLATED|WIND_GUST_LAST|WIND_DIRECTION_MEAN|DEGREE_DAY|COLD_HOURS|LEAF_SENSOR_CONDUCTIVITY_MIN|LEAF_SENSOR_CONDUCTIVITY_MAX|LEAF_SENSOR_CONDUCTIVITY_MEAN|LEAF_WETNESS|IRRADIANCE_MEAN|LEAF_WETNESS_MEDIUM|LEAF_WETNESS_HIGH": {
            "type": "number"
          }
        }
      },
      "WeatherLiveAggregationHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9]+$": {
            "$ref": "#/components/schemas/WeatherLiveAggregation"
          }
        }
      },
      "WeatherLiveAggregationItems": {
        "type": "object",
        "required": [
          "items",
          "devices",
          "devicesLiveAggregations"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "devices": {
            "$ref": "#/components/schemas/GenericDeviceHash"
          },
          "devicesLiveAggregations": {
            "$ref": "#/components/schemas/WeatherLiveAggregationHash"
          }
        }
      },
      "Quote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "author": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "chargebee": {
            "type": "object",
            "properties": {
              "quote": {
                "type": "object",
                "additionalProperties": true,
                "properties": {}
              }
            }
          },
          "hubSpotDealId": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "modificationDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "QuoteHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/Quote"
          }
        }
      },
      "QuoteItem": {
        "type": "object",
        "required": [
          "item",
          "quotes"
        ],
        "properties": {
          "item": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "quotes": {
            "$ref": "#/components/schemas/QuoteHash"
          }
        }
      },
      "QuoteItems": {
        "type": "object",
        "required": [
          "items",
          "quotes"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "quotes": {
            "$ref": "#/components/schemas/QuoteHash"
          }
        }
      },
      "TrialOperationContents": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "type": "string"
          },
          "duration": {
            "type": "number"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TrialOperation": {
        "type": "object",
        "required": [
          "id",
          "creationDate",
          "lastModificationDate",
          "contents"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "deletionDate": {
            "type": "string",
            "format": "date-time"
          },
          "organisation": {
            "type": "number"
          },
          "contents": {
            "$ref": "#/components/schemas/TrialOperationContents"
          }
        }
      },
      "TrialOperationHash": {
        "type": "object",
        "patternProperties": {
          "undefined": {
            "$ref": "#/components/schemas/TrialOperation"
          }
        }
      },
      "TrialOperationItem": {
        "type": "object",
        "required": [
          "item",
          "trialOperations"
        ],
        "properties": {
          "item": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "minimum": 1
          },
          "trialOperations": {
            "$ref": "#/components/schemas/TrialOperationHash"
          }
        }
      },
      "TrialOperationItems": {
        "type": "object",
        "required": [
          "items",
          "trialOperations"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "minimum": 1
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "trialOperations": {
            "$ref": "#/components/schemas/TrialOperationHash"
          }
        }
      },
      "UserContents": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "country": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "pattern": "[A-Z]{2}",
            "description": "Deprecated: not used anymore"
          },
          "crops": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "apple",
                "banana",
                "barley",
                "bean",
                "beet",
                "cabbage",
                "carrot",
                "colza",
                "corn",
                "garden",
                "garlic",
                "greenhouse",
                "lettuce",
                "linen",
                "oat",
                "onion",
                "other_fruits",
                "other_vegetables",
                "other-agri",
                "other-tree",
                "pea",
                "peach",
                "pear",
                "potato",
                "potatoes",
                "rapeseed",
                "rye",
                "sunflower",
                "tomato",
                "vine",
                "wheat",
                "wine"
              ]
            }
          },
          "locale": {
            "type": "string",
            "pattern": "^[a-z]{2}(-[A-Z]{2,3})?$",
            "maxLength": 5
          },
          "timeZone": {
            "type": "string",
            "pattern": "^[a-zA-Z]+/[a-zA-Z]+|UTC|GMT$",
            "maxLength": 50
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "id": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "signupType": {
            "type": "string",
            "description": "With which signup method the user has been created",
            "enum": [
              "form",
              "invitation",
              "unknown"
            ]
          },
          "emailVerified": {
            "description": "User email got verified with a link",
            "type": "boolean"
          },
          "locale": {
            "type": "string",
            "pattern": "^[a-z]{2}(-[A-Z]{2,3})?$",
            "maxLength": 5,
            "description": "Will be removed, use locale in contents instead"
          },
          "timeZone": {
            "type": "string",
            "pattern": "^[a-zA-Z]+/[a-zA-Z]+|UTC|GMT$",
            "maxLength": 50,
            "description": "Will be removed, use timeZone in contents instead"
          },
          "organisationsIds": {
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "roles": {
            "type": "array",
            "minItems": 1,
            "maxItems": 3,
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "ROLE_USER",
                "ROLE_ADMIN",
                "ROLE_TEAM"
              ]
            }
          },
          "contents": {
            "$ref": "#/components/schemas/UserContents"
          }
        }
      },
      "UserHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9]+$": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "UserItem": {
        "type": "object",
        "required": [
          "item",
          "users"
        ],
        "properties": {
          "item": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "users": {
            "$ref": "#/components/schemas/UserHash"
          }
        }
      },
      "UserItems": {
        "type": "object",
        "required": [
          "items",
          "users"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "users": {
            "$ref": "#/components/schemas/UserHash"
          }
        }
      },
      "AggregationResult": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "DEGREE_DAY",
              "COLD_HOURS",
              "RAIN_FALL_SUM",
              "LEAF_WETNESS",
              "LEAF_WETNESS_MEDIUM",
              "LEAF_WETNESS_HIGH"
            ]
          }
        },
        "patternProperties": {
          "^DEGREE_DAY|COLD_HOURS|RAIN_FALL_SUM|LEAF_WETNESS|LEAF_WETNESS_MEDIUM|LEAF_WETNESS_HIGH$": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number"
              }
            }
          }
        }
      },
      "AggregationsResultsHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9]+$": {
            "$ref": "#/components/schemas/AggregationResult"
          }
        }
      },
      "AggregationContents": {
        "oneOf": [
          {
            "type": "object",
            "description": "Date resolve aggregation",
            "required": [
              "name",
              "type",
              "aggregation",
              "ceil",
              "devicesIds"
            ],
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "date"
                ]
              },
              "aggregation": {
                "type": "string",
                "enum": [
                  "DEGREE_DAY",
                  "COLD_HOURS",
                  "RAIN_FALL_SUM",
                  "LEAF_WETNESS",
                  "LEAF_WETNESS_MEDIUM",
                  "LEAF_WETNESS_HIGH"
                ]
              },
              "ceil": {
                "type": "number"
              },
              "parameters": {
                "type": "object",
                "properties": {
                  "base": {
                    "type": "number"
                  },
                  "maxDegreeDayValue": {
                    "type": "number"
                  }
                }
              },
              "devicesIds": {
                "type": "array",
                "items": {
                  "type": "number",
                  "pattern": "^[0-9]+$",
                  "minimum": 1
                },
                "minItems": 1,
                "uniqueItems": true
              }
            }
          },
          {
            "type": "object",
            "description": "Time span value aggregation",
            "required": [
              "name",
              "type",
              "aggregation",
              "timeSpan",
              "devicesIds"
            ],
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "value"
                ]
              },
              "aggregation": {
                "type": "string",
                "enum": [
                  "DEGREE_DAY",
                  "COLD_HOURS",
                  "RAIN_FALL_SUM",
                  "LEAF_WETNESS",
                  "LEAF_WETNESS_MEDIUM",
                  "LEAF_WETNESS_HIGH"
                ]
              },
              "timeSpan": {
                "type": "integer",
                "minimum": 1
              },
              "parameters": {
                "type": "object",
                "properties": {
                  "base": {
                    "type": "number"
                  }
                }
              },
              "devicesIds": {
                "type": "array",
                "items": {
                  "type": "number",
                  "pattern": "^[0-9]+$",
                  "minimum": 1
                },
                "minItems": 1,
                "uniqueItems": true
              }
            }
          },
          {
            "type": "object",
            "description": "Date interval value aggregation",
            "required": [
              "name",
              "type",
              "aggregation",
              "startDate",
              "devicesIds"
            ],
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "value"
                ]
              },
              "aggregation": {
                "type": "string",
                "enum": [
                  "DEGREE_DAY",
                  "COLD_HOURS",
                  "RAIN_FALL_SUM",
                  "LEAF_WETNESS",
                  "LEAF_WETNESS_MEDIUM",
                  "LEAF_WETNESS_HIGH"
                ]
              },
              "startDate": {
                "type": "string",
                "format": "date-time"
              },
              "endDate": {
                "type": "string",
                "format": "date-time"
              },
              "parameters": {
                "type": "object",
                "properties": {
                  "base": {
                    "type": "number"
                  }
                }
              },
              "devicesIds": {
                "type": "array",
                "items": {
                  "type": "number",
                  "pattern": "^[0-9]+$",
                  "minimum": 1
                },
                "minItems": 1,
                "uniqueItems": true
              }
            }
          }
        ]
      },
      "Aggregation": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "contents": {
            "$ref": "#/components/schemas/AggregationContents"
          }
        }
      },
      "AggregationHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/Aggregation"
          }
        }
      },
      "AggregationItem": {
        "type": "object",
        "required": [
          "item",
          "aggregations"
        ],
        "properties": {
          "item": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "aggregations": {
            "$ref": "#/components/schemas/AggregationHash"
          }
        }
      },
      "AggregationItems": {
        "type": "object",
        "required": [
          "items",
          "aggregations"
        ],
        "properties": {
          "aggregations": {
            "$ref": "#/components/schemas/AggregationHash"
          },
          "aggregationsResults": {
            "$ref": "#/components/schemas/AggregationsResultsHash"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            "minItems": 0,
            "uniqueItems": true
          }
        }
      },
      "AlertConditions": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "ceil",
              "type",
              "ceilComparisonType",
              "timespan",
              "aggregation"
            ],
            "properties": {
              "ceil": {
                "type": "number"
              },
              "type": {
                "type": "string",
                "enum": [
                  "aggregation"
                ]
              },
              "ceilComparisonType": {
                "type": "string",
                "enum": [
                  "lte",
                  "gte"
                ]
              },
              "timespan": {
                "type": "number"
              },
              "startDate": {
                "type": "string",
                "format": "date-time"
              },
              "aggregation": {
                "type": "string",
                "enum": [
                  "RELATIVE_HUMIDITY_MEAN",
                  "RELATIVE_HUMIDITY_MIN",
                  "RELATIVE_HUMIDITY_MAX",
                  "RELATIVE_HUMIDITY_INTERPOLATED",
                  "RELATIVE_HUMIDITY_LAST",
                  "TEMPERATURE_MEAN",
                  "TEMPERATURE_MIN",
                  "TEMPERATURE_MAX",
                  "TEMPERATURE_INTERPOLATED",
                  "TEMPERATURE_LAST",
                  "WET_TEMPERATURE_MEAN",
                  "WET_TEMPERATURE_MIN",
                  "WET_TEMPERATURE_MAX",
                  "WET_TEMPERATURE_INTERPOLATED",
                  "WET_TEMPERATURE_LAST",
                  "RAIN_FALL_MEAN_SUM",
                  "RAIN_FALL_MEAN_SUM_ADJUSTED",
                  "RAIN_FALL_SUM",
                  "RAIN_FALL_MIN",
                  "RAIN_FALL_MIN_SUM",
                  "RAIN_FALL_MAX",
                  "RAIN_FALL_MAX_SUM",
                  "MOVE_SUM",
                  "INIT_SUM",
                  "WIND_SPEED_MEAN",
                  "WIND_SPEED_MIN",
                  "WIND_SPEED_MAX",
                  "WIND_SPEED_INTERPOLATED",
                  "WIND_SPEED_LAST",
                  "WIND_GUST_MEAN",
                  "WIND_GUST_MIN",
                  "WIND_GUST_MAX",
                  "WIND_GUST_INTERPOLATED",
                  "WIND_GUST_LAST",
                  "WIND_DIRECTION_MEAN",
                  "DEGREE_DAY",
                  "COLD_HOURS",
                  "LEAF_SENSOR_CONDUCTIVITY_MIN",
                  "LEAF_SENSOR_CONDUCTIVITY_MAX",
                  "LEAF_SENSOR_CONDUCTIVITY_MEAN",
                  "LEAF_WETNESS",
                  "IRRADIANCE_MEAN",
                  "LEAF_WETNESS_MEDIUM",
                  "LEAF_WETNESS_HIGH"
                ]
              },
              "aggregationParams": {
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ceil",
              "type",
              "ceilComparisonType",
              "startDate",
              "aggregation"
            ],
            "properties": {
              "ceil": {
                "type": "number"
              },
              "type": {
                "type": "string",
                "enum": [
                  "aggregation"
                ]
              },
              "ceilComparisonType": {
                "type": "string",
                "enum": [
                  "lte",
                  "gte"
                ]
              },
              "timespan": {
                "type": "number"
              },
              "startDate": {
                "type": "string",
                "format": "date-time"
              },
              "aggregation": {
                "type": "string",
                "enum": [
                  "RELATIVE_HUMIDITY_MEAN",
                  "RELATIVE_HUMIDITY_MIN",
                  "RELATIVE_HUMIDITY_MAX",
                  "RELATIVE_HUMIDITY_INTERPOLATED",
                  "RELATIVE_HUMIDITY_LAST",
                  "TEMPERATURE_MEAN",
                  "TEMPERATURE_MIN",
                  "TEMPERATURE_MAX",
                  "TEMPERATURE_INTERPOLATED",
                  "TEMPERATURE_LAST",
                  "WET_TEMPERATURE_MEAN",
                  "WET_TEMPERATURE_MIN",
                  "WET_TEMPERATURE_MAX",
                  "WET_TEMPERATURE_INTERPOLATED",
                  "WET_TEMPERATURE_LAST",
                  "RAIN_FALL_MEAN_SUM",
                  "RAIN_FALL_MEAN_SUM_ADJUSTED",
                  "RAIN_FALL_SUM",
                  "RAIN_FALL_MIN",
                  "RAIN_FALL_MIN_SUM",
                  "RAIN_FALL_MAX",
                  "RAIN_FALL_MAX_SUM",
                  "MOVE_SUM",
                  "INIT_SUM",
                  "WIND_SPEED_MEAN",
                  "WIND_SPEED_MIN",
                  "WIND_SPEED_MAX",
                  "WIND_SPEED_INTERPOLATED",
                  "WIND_SPEED_LAST",
                  "WIND_GUST_MEAN",
                  "WIND_GUST_MIN",
                  "WIND_GUST_MAX",
                  "WIND_GUST_INTERPOLATED",
                  "WIND_GUST_LAST",
                  "WIND_DIRECTION_MEAN",
                  "DEGREE_DAY",
                  "COLD_HOURS",
                  "LEAF_SENSOR_CONDUCTIVITY_MIN",
                  "LEAF_SENSOR_CONDUCTIVITY_MAX",
                  "LEAF_SENSOR_CONDUCTIVITY_MEAN",
                  "LEAF_WETNESS",
                  "IRRADIANCE_MEAN",
                  "LEAF_WETNESS_MEDIUM",
                  "LEAF_WETNESS_HIGH"
                ]
              },
              "aggregationParams": {
                "type": "object",
                "properties": {
                  "base": {
                    "type": "number"
                  }
                }
              }
            }
          }
        ]
      },
      "AlertGroupConditions": {
        "type": "object",
        "required": [
          "type",
          "tests"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "and",
              "or"
            ]
          },
          "tests": {
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/AlertConditions"
            }
          }
        }
      },
      "AlertContents": {
        "type": "object",
        "required": [
          "name",
          "status",
          "notificationTypes",
          "numberOfNotificationPerTrigger",
          "devicesIds",
          "conditions"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "enabled",
              "disabled"
            ]
          },
          "notificationTypes": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "sms",
                "email",
                "phone",
                "webhook",
                "push",
                "notification"
              ]
            }
          },
          "conditions": {
            "$ref": "#/components/schemas/AlertGroupConditions"
          },
          "enableStartTime": {
            "type": "string",
            "pattern": "\\d+:\\d+:\\d+"
          },
          "enableEndTime": {
            "type": "string",
            "pattern": "\\d+:\\d+:\\d+"
          },
          "numberOfNotificationPerTrigger": {
            "type": "number",
            "minimum": 1
          },
          "renewInterval": {
            "type": "number",
            "description": "Cooldown before alert is armed again automatically, in second"
          },
          "devicesIds": {
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 1,
            "uniqueItems": true
          }
        }
      },
      "Alert": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "userId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "activationDate": {
            "type": "string",
            "format": "date-time"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "deletionDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastCheckDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastTriggerDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastNotificationTriggerDate": {
            "type": "string",
            "format": "date-time"
          },
          "contents": {
            "$ref": "#/components/schemas/AlertContents"
          }
        }
      },
      "AlertHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/Alert"
          }
        }
      },
      "AlertsItems": {
        "type": "object",
        "required": [
          "items",
          "alerts"
        ],
        "properties": {
          "alerts": {
            "$ref": "#/components/schemas/AlertHash"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            "minItems": 0,
            "uniqueItems": true
          }
        }
      },
      "AlertItem": {
        "type": "object",
        "required": [
          "item",
          "alerts"
        ],
        "properties": {
          "item": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "alerts": {
            "$ref": "#/components/schemas/AlertHash"
          }
        }
      },
      "DeviceForecasts": {
        "type": "object",
        "required": [
          "item",
          "models",
          "devices",
          "forecasts"
        ],
        "properties": {
          "models": {
            "$ref": "#/components/schemas/ModelHash"
          },
          "devices": {
            "$ref": "#/components/schemas/GenericDeviceHash"
          },
          "item": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "forecasts": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "UserPreferences": {
        "type": "object",
        "additionalProperties": true
      },
      "Session": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "token",
          "expirationDate",
          "userId"
        ],
        "properties": {
          "token": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "expirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "organisationsIds": {
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 1,
            "uniqueItems": true
          },
          "roles": {
            "type": "array",
            "minItems": 1,
            "maxItems": 2,
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "ROLE_USER",
                "ROLE_ADMIN"
              ]
            }
          }
        }
      },
      "AuthorizationCodeTokenRequestBody": {
        "type": "object",
        "description": "Authorization code grant, see https://tools.ietf.org/html/rfc6749#section-4.1",
        "required": [
          "grant_type"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": [
              "authorization_code"
            ]
          },
          "code": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "PasswordTokenRequestBody": {
        "type": "object",
        "description": "Resource owner password credentials grant, see https://tools.ietf.org/html/rfc6749#section-4.3",
        "required": [
          "grant_type",
          "username",
          "password"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": [
              "password"
            ]
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "description": "See https://tools.ietf.org/html/rfc6749#section-3.3"
          }
        }
      },
      "ClientCredentialsTokenRequestBody": {
        "type": "object",
        "description": "Client credentials grant, see https://tools.ietf.org/html/rfc6749#section-4.4",
        "required": [
          "grant_type"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": [
              "client_credentials"
            ]
          },
          "scope": {
            "type": "string",
            "description": "See https://tools.ietf.org/html/rfc6749#section-3.3"
          }
        }
      },
      "RefreshTokenRequestBody": {
        "type": "object",
        "description": "Token refresh grant type, see https://tools.ietf.org/html/rfc6749#section-6 .",
        "required": [
          "grant_type",
          "refresh_token"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": [
              "refresh_token"
            ]
          },
          "refresh_token": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "description": "See https://tools.ietf.org/html/rfc6749#section-3.3"
          }
        }
      },
      "ModuleTokenRequestBody": {
        "type": "object",
        "description": "Module grant type, see https://tools.ietf.org/html/rfc6749#section-6 .",
        "required": [
          "grant_type",
          "email"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": [
              "module"
            ]
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "scope": {
            "type": "string",
            "description": "See https://tools.ietf.org/html/rfc6749#section-3.3"
          }
        }
      },
      "CodeRequestTokenRequestBody": {
        "type": "object",
        "description": "SMS Code request grant type, see https://tools.ietf.org/html/rfc6749#section-6 .",
        "required": [
          "grant_type",
          "email",
          "code"
        ],
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": [
              "code_request"
            ]
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "code": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "description": "See https://tools.ietf.org/html/rfc6749#section-3.3"
          }
        }
      },
      "ApplicationContents": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "description",
          "isActive",
          "scopes",
          "grantTypes",
          "callbackURL"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "scopes": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "grantTypes": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "callbackURL": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "Application": {
        "type": "object",
        "required": [
          "contents"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "userId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "organisationId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "truncatedSecret": {
            "type": "string",
            "description": "The API secret of the application truncated."
          },
          "secret": {
            "type": "string",
            "description": "The API secret of the application (provided only at its creation)."
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "modificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "contents": {
            "$ref": "#/components/schemas/ApplicationContents"
          }
        }
      },
      "ApplicationHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/Application"
          }
        }
      },
      "ApplicationItems": {
        "type": "object",
        "required": [
          "items",
          "applications"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "applications": {
            "$ref": "#/components/schemas/ApplicationHash"
          }
        }
      },
      "ApplicationItem": {
        "type": "object",
        "required": [
          "item",
          "applications"
        ],
        "properties": {
          "item": {
            "type": "string",
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          },
          "applications": {
            "$ref": "#/components/schemas/ApplicationHash"
          }
        }
      },
      "PlaceContents": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "line1",
          "city",
          "zip",
          "country"
        ],
        "properties": {
          "line1": {
            "type": "string"
          },
          "line2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "country": {
            "type": "string",
            "minLength": 2,
            "maxLength": 2,
            "pattern": "[A-Z]{2}"
          },
          "latitude": {
            "minimum": -90,
            "maximum": 90,
            "type": "number"
          },
          "longitude": {
            "minimum": -180,
            "maximum": 180,
            "type": "number"
          }
        }
      },
      "Place": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "contents"
        ],
        "properties": {
          "id": {
            "type": "number"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastModificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "addressLocalized": {
            "type": "string"
          },
          "contents": {
            "$ref": "#/components/schemas/PlaceContents"
          }
        }
      },
      "PlaceHash": {
        "type": "object",
        "patternProperties": {
          "undefined": {
            "$ref": "#/components/schemas/Place"
          }
        }
      },
      "PlaceItem": {
        "type": "object",
        "required": [
          "item",
          "places"
        ],
        "properties": {
          "item": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "places": {
            "$ref": "#/components/schemas/PlaceHash"
          }
        }
      },
      "PlacesItems": {
        "type": "object",
        "required": [
          "items",
          "places"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "places": {
            "$ref": "#/components/schemas/PlaceHash"
          }
        }
      },
      "NewQuote": {
        "type": "object",
        "required": [
          "customer",
          "authorId",
          "quote"
        ],
        "additionalProperties": false,
        "properties": {
          "customer": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "userId": {
                "type": "number",
                "pattern": "^[0-9]+$",
                "minimum": 1
              },
              "user": {
                "$ref": "#/components/schemas/UserContents"
              },
              "organisationId": {
                "type": "number",
                "pattern": "^[0-9]+$",
                "minimum": 1
              },
              "organisation": {
                "$ref": "#/components/schemas/OrganisationContents"
              },
              "subscriptionId": {
                "type": "string"
              },
              "organisationPlaceId": {
                "type": "number",
                "pattern": "^[0-9]+$",
                "minimum": 1
              },
              "organisationPlace": {
                "$ref": "#/components/schemas/PlaceContents"
              },
              "country": {
                "type": "string",
                "minLength": 2,
                "maxLength": 2,
                "pattern": "[A-Z]{2}"
              }
            }
          },
          "authorId": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1,
            "description": "Sencrop member team, author of the quote"
          },
          "quote": {
            "type": "object",
            "required": [
              "subscription",
              "currency"
            ],
            "properties": {
              "subscription": {
                "type": "object",
                "required": [
                  "planId"
                ],
                "additionalProperties": false,
                "properties": {
                  "planId": {
                    "type": "string"
                  }
                }
              },
              "addons": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "id",
                    "quantity"
                  ],
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "quantity": {
                      "type": "number"
                    }
                  }
                },
                "minItems": 1
              },
              "couponId": {
                "type": "string"
              },
              "notes": {
                "type": "string"
              },
              "currency": {
                "type": "string",
                "enum": [
                  "EUR",
                  "GBP"
                ],
                "description": "Required by Chargebee for one time charges"
              }
            }
          },
          "hubSpotDealId": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9]{5,15}$"
          },
          "hubSpotSubSegmentation": {
            "type": "string"
          },
          "operationId": {
            "type": "string",
            "description": "Used to gather multiple quote together"
          },
          "isPromotingConversion": {
            "type": "boolean",
            "description": "Tag the quote as a quote to convert a promoting farmer"
          },
          "referral": {
            "$ref": "#/components/schemas/Referral"
          }
        }
      },
      "Referral": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "utm_source": {
            "description": "Identifies which site sent the traffic",
            "type": "string"
          },
          "utm_medium": {
            "description": "Identifies what type of link was used",
            "type": "string"
          },
          "utm_campaign": {
            "description": "Identifies the campaign",
            "type": "string"
          }
        }
      },
      "NewUser": {
        "type": "object",
        "required": [
          "contents",
          "password"
        ],
        "properties": {
          "id": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "signupType": {
            "type": "string",
            "description": "With which signup method the user has been created",
            "enum": [
              "form",
              "invitation",
              "unknown"
            ]
          },
          "emailVerified": {
            "description": "User email got verified with a link",
            "type": "boolean"
          },
          "locale": {
            "type": "string",
            "pattern": "^[a-z]{2}(-[A-Z]{2,3})?$",
            "maxLength": 5,
            "description": "Will be removed, use locale in contents instead"
          },
          "timeZone": {
            "type": "string",
            "pattern": "^[a-zA-Z]+/[a-zA-Z]+|UTC|GMT$",
            "maxLength": 50,
            "description": "Will be removed, use timeZone in contents instead"
          },
          "organisationsIds": {
            "type": "array",
            "items": {
              "type": "number",
              "pattern": "^[0-9]+$",
              "minimum": 1
            },
            "minItems": 0,
            "uniqueItems": true
          },
          "roles": {
            "type": "array",
            "minItems": 1,
            "maxItems": 3,
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "ROLE_USER",
                "ROLE_ADMIN",
                "ROLE_TEAM"
              ]
            }
          },
          "contents": {
            "$ref": "#/components/schemas/UserContents"
          },
          "password": {
            "type": "string",
            "minLength": 8
          },
          "referral": {
            "$ref": "#/components/schemas/Referral"
          },
          "mustBeInTrial": {
            "type": "boolean",
            "description": "Not used anymore, will be removed in next version"
          },
          "callbackURL": {
            "type": "string",
            "pattern": "^https://(\\w+\\.)+sencrop\\.com(/[^?]*)?$"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string"
          },
          "code": {
            "type": "string",
            "pattern": "^E_[a-zA-Z0-9_]+$"
          }
        }
      }
    },
    "parameters": {
      "accessId": {
        "in": "path",
        "description": "The access id",
        "name": "accessId",
        "required": true,
        "schema": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        }
      },
      "deviceId": {
        "in": "path",
        "description": "The device id",
        "name": "deviceId",
        "required": true,
        "schema": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        }
      },
      "date": {
        "in": "query",
        "description": "The date of the cron execution",
        "name": "date",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "organisationId": {
        "in": "path",
        "description": "The organisation id",
        "name": "organisationId",
        "required": true,
        "schema": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        }
      },
      "memberId": {
        "in": "path",
        "description": "The member id",
        "name": "memberId",
        "required": true,
        "schema": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        }
      },
      "networkId": {
        "in": "path",
        "description": "The network id",
        "name": "networkId",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|[0-9]+$"
        }
      },
      "alertId": {
        "in": "path",
        "description": "The alert id",
        "name": "alertId",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        }
      },
      "moduleId": {
        "in": "path",
        "description": "The module id",
        "name": "moduleId",
        "required": true,
        "schema": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        }
      },
      "invitationId": {
        "in": "path",
        "description": "The invitation id",
        "name": "invitationId",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        }
      },
      "shareId": {
        "in": "path",
        "description": "The share id",
        "name": "shareId",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[0-9]+_[0-9]+$",
          "minimum": 1
        }
      },
      "withCalibration": {
        "in": "query",
        "description": "Wether the calibration of rain falls must be taken in count",
        "name": "withCalibration",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "latitude": {
        "in": "query",
        "description": "The latitude of the data",
        "name": "latitude",
        "required": true,
        "schema": {
          "minimum": -90,
          "maximum": 90,
          "type": "number",
          "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$"
        }
      },
      "longitude": {
        "in": "query",
        "description": "The longitude of the data",
        "name": "longitude",
        "required": true,
        "schema": {
          "minimum": -180,
          "maximum": 180,
          "type": "number",
          "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$"
        }
      },
      "minimumFiability": {
        "in": "query",
        "description": "The minimum fiability of measures to be used",
        "name": "minimumFiability",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "ranges": {
        "in": "query",
        "description": "The ranges to get the data from",
        "name": "ranges",
        "required": true,
        "explode": false,
        "schema": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "number",
            "enum": [
              0.3,
              3,
              7,
              10,
              15,
              40,
              80
            ]
          }
        }
      },
      "endDate": {
        "in": "query",
        "description": "The statistics end date",
        "name": "endDate",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "measures": {
        "in": "query",
        "description": "The measures to read",
        "name": "measures",
        "required": true,
        "explode": false,
        "schema": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "enum": [
              "RELATIVE_HUMIDITY",
              "RELATIVE_HUMIDITY_MIN",
              "RELATIVE_HUMIDITY_MAX",
              "RELATIVE_HUMIDITY_INTERPOLATED",
              "RELATIVE_HUMIDITY_LAST",
              "TEMPERATURE",
              "TEMPERATURE_MIN",
              "TEMPERATURE_MAX",
              "TEMPERATURE_INTERPOLATED",
              "TEMPERATURE_LAST",
              "WET_TEMPERATURE",
              "WET_TEMPERATURE_MIN",
              "WET_TEMPERATURE_MAX",
              "WET_TEMPERATURE_INTERPOLATED",
              "WET_TEMPERATURE_LAST",
              "LEAF_SENSOR_CONDUCTIVITY",
              "LEAF_SENSOR_CONDUCTIVITY_MIN",
              "LEAF_SENSOR_CONDUCTIVITY_MAX",
              "LEAF_SENSOR_CONDUCTIVITY_LAST",
              "RAIN_FALL",
              "RAIN_FALL_MEAN_SUM",
              "RAIN_FALL_MEAN_SUM_ADJUSTED",
              "WIND_SPEED",
              "WIND_GUST",
              "WIND_DIRECTION",
              "MOVE",
              "LEAF_WETNESS",
              "LEAF_WETNESS_MEDIUM",
              "LEAF_WETNESS_HIGH",
              "IRRADIANCE",
              "RH_AIR_H1",
              "RH_AIR_H1_MIN",
              "RH_AIR_H1_MAX",
              "TEMP_AIR_H1",
              "TEMP_AIR_H1_MIN",
              "TEMP_AIR_H1_MAX",
              "RAIN_TIC",
              "WIND_MEAN",
              "WIND_MAX"
            ]
          }
        }
      },
      "startDate": {
        "in": "query",
        "description": "The statistics start date",
        "name": "startDate",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "timeZone": {
        "in": "query",
        "required": false,
        "description": "The timezone of the data",
        "name": "timeZone",
        "schema": {
          "type": "string",
          "pattern": "^[a-zA-Z]+/[a-zA-Z]+|UTC|GMT$",
          "maxLength": 50
        }
      },
      "beforeDate": {
        "in": "query",
        "description": "The date before which the data starts being retrieved",
        "name": "beforeDate",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "includeHistory": {
        "in": "query",
        "description": "If must include device replacements or not",
        "name": "includeHistory",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "devicesIds": {
        "in": "query",
        "description": "List of id's of devices",
        "name": "devicesIds",
        "required": true,
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "number",
            "pattern": "^[0-9]+$",
            "minimum": 1
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "checkDate": {
        "in": "query",
        "description": "The date of the check",
        "name": "checkDate",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "The number of items to retrieve",
        "required": true,
        "schema": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "enum": [
            10,
            50,
            100
          ]
        }
      },
      "start": {
        "name": "start",
        "in": "query",
        "description": "The index in results",
        "required": true,
        "schema": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 0,
          "multipleOf": 10
        }
      },
      "patched": {
        "in": "query",
        "description": "Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.",
        "name": "patched",
        "schema": {
          "type": "boolean"
        }
      },
      "aggregations": {
        "in": "query",
        "required": true,
        "explode": false,
        "description": "The aggregations names",
        "name": "aggregations",
        "schema": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "enum": [
              "RELATIVE_HUMIDITY_MEAN",
              "RELATIVE_HUMIDITY_MIN",
              "RELATIVE_HUMIDITY_MAX",
              "RELATIVE_HUMIDITY_INTERPOLATED",
              "RELATIVE_HUMIDITY_LAST",
              "TEMPERATURE_MEAN",
              "TEMPERATURE_MIN",
              "TEMPERATURE_MAX",
              "TEMPERATURE_INTERPOLATED",
              "TEMPERATURE_LAST",
              "WET_TEMPERATURE_MEAN",
              "WET_TEMPERATURE_MIN",
              "WET_TEMPERATURE_MAX",
              "WET_TEMPERATURE_INTERPOLATED",
              "WET_TEMPERATURE_LAST",
              "RAIN_FALL_MEAN_SUM",
              "RAIN_FALL_MEAN_SUM_ADJUSTED",
              "RAIN_FALL_SUM",
              "RAIN_FALL_MIN",
              "RAIN_FALL_MIN_SUM",
              "RAIN_FALL_MAX",
              "RAIN_FALL_MAX_SUM",
              "MOVE_SUM",
              "INIT_SUM",
              "WIND_SPEED_MEAN",
              "WIND_SPEED_MIN",
              "WIND_SPEED_MAX",
              "WIND_SPEED_INTERPOLATED",
              "WIND_SPEED_LAST",
              "WIND_GUST_MEAN",
              "WIND_GUST_MIN",
              "WIND_GUST_MAX",
              "WIND_GUST_INTERPOLATED",
              "WIND_GUST_LAST",
              "WIND_DIRECTION_MEAN",
              "DEGREE_DAY",
              "COLD_HOURS",
              "LEAF_SENSOR_CONDUCTIVITY_MIN",
              "LEAF_SENSOR_CONDUCTIVITY_MAX",
              "LEAF_SENSOR_CONDUCTIVITY_MEAN",
              "LEAF_WETNESS",
              "IRRADIANCE_MEAN",
              "LEAF_WETNESS_MEDIUM",
              "LEAF_WETNESS_HIGH"
            ]
          }
        }
      },
      "intervals": {
        "in": "query",
        "required": true,
        "explode": false,
        "description": "The intervals to retrieve",
        "name": "intervals",
        "schema": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string",
            "enum": [
              "current",
              "one_hour",
              "three_hours",
              "one_day",
              "one_week",
              "today",
              "yesterday",
              "this_week",
              "last_seven_days"
            ]
          }
        }
      },
      "parameters": {
        "in": "query",
        "required": false,
        "description": "The params to set",
        "name": "parameters",
        "example": [
          "base:7"
        ],
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "((^| )fiability,withCalibration,base,ceil:[^ ]+){,4}$"
          }
        }
      },
      "statusDate": {
        "in": "query",
        "description": "The status date",
        "name": "date",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "invitationWithStatusesFilter": {
        "in": "query",
        "name": "withStatuses",
        "required": false,
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "pending",
              "accepted",
              "declined"
            ]
          }
        }
      },
      "invitationWithTypesFilter": {
        "in": "query",
        "name": "withTypes",
        "required": false,
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "member",
              "share"
            ]
          }
        }
      },
      "placeId": {
        "in": "path",
        "description": "The place id",
        "name": "placeId",
        "required": true,
        "schema": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        }
      },
      "shareWithTypesFilter": {
        "in": "query",
        "name": "withTypes",
        "required": false,
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "set",
              "select"
            ]
          }
        }
      },
      "shareIsTransmittableFilter": {
        "in": "query",
        "name": "isTransmittable",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "shareWithModesFilter": {
        "in": "query",
        "name": "withModes",
        "required": false,
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "received",
              "shared"
            ]
          }
        }
      },
      "partnerId": {
        "in": "path",
        "description": "The partner organisation id",
        "name": "partnerId",
        "required": true,
        "schema": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        }
      },
      "liveInterval": {
        "in": "query",
        "required": true,
        "explode": false,
        "description": "The interval to retrieve",
        "name": "liveInterval",
        "schema": {
          "type": "string",
          "enum": [
            "current",
            "one_hour",
            "three_hours",
            "one_day",
            "one_week",
            "today",
            "yesterday",
            "this_week",
            "last_seven_days"
          ]
        }
      },
      "quoteId": {
        "in": "path",
        "description": "The quote id",
        "name": "quoteId",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        }
      },
      "radius": {
        "in": "query",
        "description": "The radius of the area in meters.",
        "name": "radius",
        "schema": {
          "type": "number"
        }
      },
      "trialOperationId": {
        "in": "path",
        "description": "The trial operation id",
        "name": "trialOperationId",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "minimum": 1
        }
      },
      "userId": {
        "in": "path",
        "description": "The user id",
        "name": "userId",
        "required": true,
        "schema": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        }
      },
      "aggregationId": {
        "in": "path",
        "description": "The aggregation id",
        "name": "aggregationId",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        }
      },
      "days": {
        "in": "query",
        "description": "The number of days to retrieve",
        "name": "days",
        "required": true,
        "schema": {
          "type": "number",
          "enum": [
            7,
            30,
            60,
            90
          ]
        }
      },
      "interval": {
        "in": "query",
        "description": "The interval of data (Accepted value : 31 days for 1h interval, 1 year for 1d interval, 5y for 1w interval)",
        "name": "interval",
        "schema": {
          "type": "string",
          "enum": [
            "15m",
            "1h",
            "1d",
            "1w",
            "1M"
          ]
        }
      },
      "invitationWithModesFilter": {
        "in": "query",
        "name": "withModes",
        "required": false,
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "received",
              "sent"
            ]
          }
        }
      },
      "geohash": {
        "in": "query",
        "description": "The geohash to lookup",
        "name": "geohash",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[0-9bcdefghjkmnpqrstuvwxyz]+$",
          "maxLength": 12
        }
      },
      "measureType": {
        "in": "query",
        "description": "The measures to read",
        "name": "measureType",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "RELATIVE_HUMIDITY",
            "TEMPERATURE",
            "WIND_SPEED",
            "WIND_GUST",
            "WIND_DIRECTION",
            "RAIN_FALL",
            "IRRADIANCE"
          ]
        }
      },
      "consumptionDate": {
        "in": "query",
        "description": "The date of the message consumption",
        "name": "date",
        "required": true,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "networkMemberId": {
        "in": "path",
        "description": "The organisation id of the network member",
        "name": "networkMemberId",
        "required": true,
        "schema": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        }
      },
      "bucketDeviceId": {
        "in": "path",
        "description": "The bucket device id",
        "name": "bucketDeviceId",
        "required": true,
        "schema": {
          "type": "number",
          "pattern": "^[0-9]+$",
          "minimum": 1
        }
      },
      "applicationId": {
        "in": "path",
        "description": "The application uuid",
        "name": "applicationId",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        }
      },
      "xApiVersion": {
        "name": "X-API-Version",
        "in": "header",
        "required": false,
        "example": "1.1.2-beta.1",
        "schema": {
          "type": "string",
          "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
        }
      },
      "xSdkVersion": {
        "name": "X-SDK-Version",
        "in": "header",
        "required": false,
        "example": "1.1.2-beta.1",
        "schema": {
          "type": "string",
          "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
        }
      },
      "xAppVersion": {
        "name": "X-APP-Version",
        "in": "header",
        "required": false,
        "example": "1.1.2-beta.1",
        "schema": {
          "type": "string",
          "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
        }
      }
    },
    "securitySchemes": {
      "maybeBearerAuth": {
        "description": "Optional bearer authentication with a user API token",
        "type": "http",
        "scheme": "bearer"
      },
      "bearerAuth": {
        "description": "Bearer authentication with a user API token",
        "type": "http",
        "scheme": "bearer"
      },
      "onceAuth": {
        "description": "Bearer like authentication but doable only once (prefix is Once instead of Bearer",
        "type": "apiKey",
        "in": "header",
        "name": "authorization"
      },
      "accessTokenAuth": {
        "description": "Alternative to Bearer authentication through query parameters.",
        "type": "apiKey",
        "in": "query",
        "name": "access_token"
      },
      "basicAuth": {
        "description": "Basic authentication with APPLICATION_ID/APPLICATION_SECRET credentials",
        "type": "http",
        "scheme": "basic"
      },
      "sencropOAuth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/master/oauth2/authorize",
            "tokenUrl": "/master/oauth2/token",
            "refreshUrl": "/master/oauth2/token",
            "scopes": {
              "user": "Access to the user account"
            }
          },
          "implicit": {
            "authorizationUrl": "/master/oauth2/authorize",
            "scopes": {
              "user": "Access to the user account"
            }
          },
          "password": {
            "tokenUrl": "/master/oauth2/token",
            "scopes": {
              "user": "Access to the user account",
              "partner": "Partner access to user's devices"
            }
          },
          "clientCredentials": {
            "tokenUrl": "/master/oauth2/token",
            "scopes": {
              "partner": "Partner access to user's devices"
            }
          }
        }
      },
      "fakeAuth": {
        "description": "A fake authentication for development purpose.",
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  },
  "openapi": "3.0.2",
  "info": {
    "version": "1.60.7",
    "title": "Sencrop API",
    "description": "API to consume Sencrop data"
  },
  "servers": [
    "https://api.sencrop.com/v1"
  ],
  "tags": [
    {
      "name": "aggregations",
      "description": "Endpoints related to aggregations."
    },
    {
      "name": "alerts",
      "description": "Endpoints related to alerts."
    },
    {
      "name": "billing",
      "description": "Endpoints related to billing operations."
    },
    {
      "name": "buckets",
      "description": "Endpoints related to buckets (management of device remplacement)."
    },
    {
      "name": "CORS",
      "description": "Endpoints related to CORS."
    },
    {
      "name": "cotations",
      "description": "Endpoints related to cotations."
    },
    {
      "name": "data",
      "description": "Endpoints allowing to access to devices's data."
    },
    {
      "name": "devices",
      "description": "Endpoints related to devices."
    },
    {
      "name": "forecasts",
      "description": "Endpoints related to forecasts."
    },
    {
      "name": "graphql",
      "description": "Endpoints allowing to execute GraphQL queries."
    },
    {
      "name": "hubspot",
      "description": "Endpoints related to HubSpot."
    },
    {
      "name": "invitations",
      "description": "Endpoints related to invitations (invite users with extra side effects)."
    },
    {
      "name": "members",
      "description": "Endpoints related to organisation's users."
    },
    {
      "name": "miscellaneous",
      "description": "Other endpoints."
    },
    {
      "name": "modules",
      "description": "Endpoint related to the Sencrop's modules."
    },
    {
      "name": "monitoring",
      "description": "Endpoints related to monitoring of factory/devices activities."
    },
    {
      "name": "networks",
      "description": "Endpoints related to organisations networks."
    },
    {
      "name": "oauth2",
      "description": "Endpoints relative to the [OAuth2](https://tools.ietf.org/html/rfc6749) implementation at Sencrop (still a work in progress)."
    },
    {
      "name": "orders",
      "description": "Endpoints related to manual and chargebee orders."
    },
    {
      "name": "organisations",
      "description": "Endpoints related to organisations."
    },
    {
      "name": "partnerAccess",
      "description": "Endpoints partners can access and shown in dev.sencrop.com."
    },
    {
      "name": "partners",
      "description": "[Partners's API](https://developer.sencrop.com/partners/) endpoints."
    },
    {
      "name": "places",
      "description": "Endpoints related to places."
    },
    {
      "name": "preferences",
      "description": "Endpoints related to preferences of the application."
    },
    {
      "name": "quotes",
      "description": "Endpoints related to quote and quotator."
    },
    {
      "name": "search",
      "description": "Endpoints allowing to discover entities through the API."
    },
    {
      "name": "shares",
      "description": "Endpoints related to organisations shared devices."
    },
    {
      "name": "support",
      "description": "Endpoints available for support teams."
    },
    {
      "name": "system",
      "description": "System endpoints, to be use by Sencrop's teams only."
    },
    {
      "name": "trial",
      "description": "Endpoints related to the trial."
    },
    {
      "name": "users",
      "description": "Endpoints related to users."
    }
  ]
}