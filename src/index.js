// WARNING: This file is automatically generated
// do not change it in place it would be overridden
// by the next build
'use strict';

const querystring = require('querystring');
const axios = require('axios');

/**
 * API to consume Sencrop data
 * @module API
 * @version 1.60.4
 */
const API = {
  deleteOrganisationChargebeeId,
  postOrganisationChargebeeId,
  deleteOrganisationDevice,
  getOrganisationDevice,
  putOrganisationDevice,
  deleteOrganisationNetworkDeviceAccess,
  putOrganisationNetworkDeviceAccess,
  deleteUserOrganisationAggregation,
  putUserOrganisationAggregation,
  deleteUserOrganisationAlert,
  putUserOrganisationAlert,
  deleteUserOrganisationDeviceModule,
  putUserOrganisationDeviceModule,
  deleteUserOrganisationInvitation,
  putUserOrganisationInvitation,
  deleteUserOrganisationMember,
  putUserOrganisationMember,
  putUserOrganisationOpenNetworkMembership,
  deleteUserOrganisationShare,
  putUserOrganisationShare,
  getOpenAPI,
  getCrops,
  getFactorySigfoxStatus,
  getInvitation,
  getInvitationDeviceLiveAggregations,
  getModules,
  getMySelf,
  getNetwork,
  getNetworkDeviceLiveAggregations,
  getNetworkDevices,
  getOAuth2Authorize,
  getOrganisation,
  putOrganisation,
  getOrganisationChargebeePortalSession,
  getOrganisationDevices,
  getOrganisationDevicesLiveAggregations,
  getOrganisationHostedPage,
  getOrganisationInvitation,
  getOrganisationInvitations,
  getOrganisationMember,
  getOrganisationMembers,
  getOrganisationNetworkDevices,
  getOrganisationNetworks,
  getOrganisationPlace,
  getOrganisationPlaces,
  postOrganisationPlace,
  getOrganisationPreferences,
  putOrganisationPreferences,
  getOrganisationShare,
  getOrganisationShares,
  getOrganisationsTrialOperations,
  getPartnerDevices,
  getPing,
  getPublicWeatherLive,
  getPublicWeatherLiveAggregations,
  getQuote,
  getQuoteHostedPage,
  getSearchDevices,
  getSearchNetworkDevices,
  getSearchUser,
  getTrialOperation,
  getUser,
  putUser,
  getUserAggregation,
  getUserAggregations,
  getUserAlerts,
  getUserDailyData,
  getUserDevice,
  getUserDeviceContinuousStatistics,
  getUserDeviceDailyData,
  getUserDeviceForecasts,
  getUserDeviceHourlyData,
  getUserDeviceModules,
  getUserDevicePositions,
  getUserDeviceRawData,
  getUserDeviceStatistics,
  getUserDeviceSummary,
  getUserDevices,
  getUserDevicesLiveAggregations,
  getUserForecasts,
  getUserHourlyData,
  getUserIntercomHash,
  getUserInvitation,
  getUserInvitations,
  getUserOrganisations,
  postUserOrganisation,
  getUserPendingInvitation,
  getUserPendingInvitations,
  getUserPreferences,
  putUserPreferences,
  getUserStatistics,
  getWeatherLive,
  postInvitationResend,
  postLogin,
  postLostPassword,
  postOAuth2Token,
  postOrganisation,
  postOrganisationEndTrialSupport,
  postOrganisationNetworkMemberPlan,
  postOrganisationPaymentComplete,
  postOrganisationToNetworkSupport,
  postOrganisationTrialReactivation,
  postPartnerToken,
  postPartnerTokenRequest,
  postQuoteOffline,
  postRegister,
  postSignatureCloudinary,
  postSignupCheck,
  postSocialImage,
  postUser,
  postUserDeviceExport,
  postUserNetworkInvitation,
  postUserOrganisationAggregation,
  postUserOrganisationAlert,
  postUserOrganisationDevice,
  postUserOrganisationInvitation,
  postUserOrganisationMember,
  postUserPassword,
  postVerify,
  putOrganisationDeviceCalibration,
  putOrganisationDeviceSettings,
  putOrganisationPlace,
  putOrganisationTrial,
  putPartnerModuleParameters,
  putPassword,
  putUserFCMToken,
  putUserInvitationAnswer,
  getGraphQL,
  postGraphQL,
};

/**
 * Remove chargebeeId from the organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteOrganisationChargebeeId(
  { organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'delete';
  let urlParts = ['organisations', organisationId, 'chargebeeId'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Add chargebeeId for an organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationChargebeeId(
  { body, organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'post';
  let urlParts = ['organisations', organisationId, 'chargebeeId'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Delete an organisation's device access.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteOrganisationDevice(
  { organisationId, deviceId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'delete';
  let urlParts = ['organisations', organisationId, 'devices', deviceId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a current organisation's device.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationDevice(
  { organisationId, deviceId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'devices', deviceId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update an organisation's device.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisationDevice(
  {
    body,
    organisationId,
    deviceId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'put';
  let urlParts = ['organisations', organisationId, 'devices', deviceId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Delete an organisation's network device access.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.networkId
 * The network id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteOrganisationNetworkDeviceAccess(
  {
    organisationId,
    networkId,
    deviceId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (networkId == null) {
    throw new Error(
      'Missing required parameter : networkId. Value : ' + networkId,
    );
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'delete';
  let urlParts = [
    'organisations',
    organisationId,
    'networks',
    networkId,
    'devices',
    deviceId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update an organisation's device.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.networkId
 * The network id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisationNetworkDeviceAccess(
  {
    organisationId,
    networkId,
    deviceId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (networkId == null) {
    throw new Error(
      'Missing required parameter : networkId. Value : ' + networkId,
    );
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'put';
  let urlParts = [
    'organisations',
    organisationId,
    'networks',
    networkId,
    'devices',
    deviceId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Delete a user's aggregation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.aggregationId
 * The aggregation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserOrganisationAggregation(
  {
    userId,
    organisationId,
    aggregationId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (aggregationId == null) {
    throw new Error(
      'Missing required parameter : aggregationId. Value : ' + aggregationId,
    );
  }

  const method = 'delete';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'aggregations',
    aggregationId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Upsert an organisation's aggregation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.aggregationId
 * The aggregation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserOrganisationAggregation(
  {
    body,
    userId,
    organisationId,
    aggregationId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (aggregationId == null) {
    throw new Error(
      'Missing required parameter : aggregationId. Value : ' + aggregationId,
    );
  }

  const method = 'put';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'aggregations',
    aggregationId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Delete a user's alert.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.alertId
 * The alert id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserOrganisationAlert(
  {
    userId,
    organisationId,
    alertId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (alertId == null) {
    throw new Error('Missing required parameter : alertId. Value : ' + alertId);
  }

  const method = 'delete';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'alerts',
    alertId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update an organisation's alert.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.alertId
 * The alert id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserOrganisationAlert(
  {
    body,
    userId,
    organisationId,
    alertId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (alertId == null) {
    throw new Error('Missing required parameter : alertId. Value : ' + alertId);
  }

  const method = 'put';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'alerts',
    alertId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Disable a module for a user's organisations's device
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {number} parameters.moduleId
 * The module id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserOrganisationDeviceModule(
  {
    userId,
    organisationId,
    deviceId,
    moduleId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  if (moduleId == null) {
    throw new Error(
      'Missing required parameter : moduleId. Value : ' + moduleId,
    );
  }

  const method = 'delete';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'devices',
    deviceId,
    'modules',
    moduleId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Add a module to a user's organisations's device
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {number} parameters.moduleId
 * The module id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserOrganisationDeviceModule(
  {
    body,
    userId,
    organisationId,
    deviceId,
    moduleId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  if (moduleId == null) {
    throw new Error(
      'Missing required parameter : moduleId. Value : ' + moduleId,
    );
  }

  const method = 'put';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'devices',
    deviceId,
    'modules',
    moduleId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Delete a user's organisation invitation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.invitationId
 * The invitation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserOrganisationInvitation(
  {
    userId,
    organisationId,
    invitationId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (invitationId == null) {
    throw new Error(
      'Missing required parameter : invitationId. Value : ' + invitationId,
    );
  }

  const method = 'delete';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'invitations',
    invitationId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update an organisation's invitation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.invitationId
 * The invitation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserOrganisationInvitation(
  {
    body,
    userId,
    organisationId,
    invitationId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (invitationId == null) {
    throw new Error(
      'Missing required parameter : invitationId. Value : ' + invitationId,
    );
  }

  const method = 'put';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'invitations',
    invitationId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Delete a member from an user's organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.memberId
 * The member id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserOrganisationMember(
  {
    userId,
    organisationId,
    memberId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (memberId == null) {
    throw new Error(
      'Missing required parameter : memberId. Value : ' + memberId,
    );
  }

  const method = 'delete';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'members',
    memberId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Add or edit an member to an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.memberId
 * The member id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserOrganisationMember(
  {
    body,
    userId,
    organisationId,
    memberId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (memberId == null) {
    throw new Error(
      'Missing required parameter : memberId. Value : ' + memberId,
    );
  }

  const method = 'put';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'members',
    memberId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Allow an organisation to join an open network
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.networkId
 * The network id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserOrganisationOpenNetworkMembership(
  {
    userId,
    organisationId,
    networkId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (networkId == null) {
    throw new Error(
      'Missing required parameter : networkId. Value : ' + networkId,
    );
  }

  const method = 'put';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'openNetworks',
    networkId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * undefined
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.shareId
 * The share id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function deleteUserOrganisationShare(
  {
    userId,
    organisationId,
    shareId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (shareId == null) {
    throw new Error('Missing required parameter : shareId. Value : ' + shareId);
  }

  const method = 'delete';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'shares',
    shareId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * undefined
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.shareId
 * The share id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserOrganisationShare(
  {
    body,
    userId,
    organisationId,
    shareId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (shareId == null) {
    throw new Error('Missing required parameter : shareId. Value : ' + shareId);
  }

  const method = 'put';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'shares',
    shareId,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get API documentation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {array} [parameters.mutedParameters]
 * undefined,
 * @param {array} [parameters.mutedMethods]
 * undefined,
 * @param {array} [parameters.tags]
 * undefined,
 * @param {boolean} [parameters.authenticated]
 * undefined,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOpenAPI(
  {
    mutedParameters,
    mutedMethods,
    tags,
    authenticated,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  const method = 'get';
  let urlParts = ['openAPI'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    mutedParameters: mutedParameters,
    mutedMethods: mutedMethods,
    tags: tags,
    authenticated: authenticated,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get the crops
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getCrops({ xAppVersion } = {}, options) {
  const method = 'get';
  let urlParts = ['crops'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get sigfox statuses for devices in production line tests
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.serial
 * Sigfox serial from a device,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getFactorySigfoxStatus(
  { serial, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (serial == null) {
    throw new Error('Missing required parameter : serial. Value : ' + serial);
  }

  const method = 'get';
  let urlParts = ['factory', 'sigfox', 'status', serial];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get an invitation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.invitationId
 * The invitation id
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getInvitation({ invitationId, xAppVersion } = {}, options) {
  if (invitationId == null) {
    throw new Error(
      'Missing required parameter : invitationId. Value : ' + invitationId,
    );
  }

  const method = 'get';
  let urlParts = ['invitations', invitationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Retrieve last measures for a given device from an invitation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.invitationId
 * The invitation id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.timeZone
 * The timezone of the data
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getInvitationDeviceLiveAggregations(
  { invitationId, deviceId, timeZone, xAppVersion } = {},
  options,
) {
  if (invitationId == null) {
    throw new Error(
      'Missing required parameter : invitationId. Value : ' + invitationId,
    );
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  if (timeZone == null) {
    throw new Error(
      'Missing required parameter : timeZone. Value : ' + timeZone,
    );
  }

  const method = 'get';
  let urlParts = [
    'invitations',
    invitationId,
    'devices',
    deviceId,
    'liveAggregations',
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    timeZone: timeZone,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get the modules
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getModules({ xAppVersion } = {}, options) {
  const method = 'get';
  let urlParts = ['modules'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Redirect to the user profile.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getMySelf({ authorization, accessToken, xAppVersion } = {}, options) {
  const method = 'get';
  let urlParts = ['me'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get the network.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.networkId
 * The network id
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getNetwork({ networkId, xAppVersion } = {}, options) {
  if (networkId == null) {
    throw new Error(
      'Missing required parameter : networkId. Value : ' + networkId,
    );
  }

  const method = 'get';
  let urlParts = ['networks', networkId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Retrieve last measures for a given device from a network
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.networkId
 * The network id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.timeZone
 * The timezone of the data
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getNetworkDeviceLiveAggregations(
  { networkId, deviceId, timeZone, xAppVersion } = {},
  options,
) {
  if (networkId == null) {
    throw new Error(
      'Missing required parameter : networkId. Value : ' + networkId,
    );
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  if (timeZone == null) {
    throw new Error(
      'Missing required parameter : timeZone. Value : ' + timeZone,
    );
  }

  const method = 'get';
  let urlParts = [
    'networks',
    networkId,
    'devices',
    deviceId,
    'liveAggregations',
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    timeZone: timeZone,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get devices for a network
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.networkId
 * The network id
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getNetworkDevices({ networkId, xAppVersion } = {}, options) {
  if (networkId == null) {
    throw new Error(
      'Missing required parameter : networkId. Value : ' + networkId,
    );
  }

  const method = 'get';
  let urlParts = ['networks', networkId, 'devices'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Implements the [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1)
 as defined per the OAuth2 RFC.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.responseType
 * undefined,
 * @param {string} parameters.clientId
 * undefined,
 * @param {string} [parameters.redirectUri]
 * undefined,
 * @param {string} [parameters.scope]
 * See https://tools.ietf.org/html/rfc6749#section-3.3,
 * @param {string} parameters.state
 * undefined
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOAuth2Authorize(
  { responseType, clientId, redirectUri, scope, state, xAppVersion } = {},
  options,
) {
  if (responseType == null) {
    throw new Error(
      'Missing required parameter : responseType. Value : ' + responseType,
    );
  }

  if (clientId == null) {
    throw new Error(
      'Missing required parameter : clientId. Value : ' + clientId,
    );
  }

  if (state == null) {
    throw new Error('Missing required parameter : state. Value : ' + state);
  }

  const method = 'get';
  let urlParts = ['oauth2', 'authorize'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    response_type: responseType,
    client_id: clientId,
    redirect_uri: redirectUri,
    scope: scope,
    state: state,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get the organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisation(
  { organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update an organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisation(
  { body, organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'put';
  let urlParts = ['organisations', organisationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a chargebee portal session
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationChargebeePortalSession(
  { organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'get';
  let urlParts = [
    'organisations',
    organisationId,
    'chargebee',
    'portal_sessions',
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a current organisation's devices.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.limit
 * The number of items to retrieve,
 * @param {number} parameters.start
 * The index in results,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationDevices(
  {
    organisationId,
    limit,
    start,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (limit == null) {
    throw new Error('Missing required parameter : limit. Value : ' + limit);
  }

  if (start == null) {
    throw new Error('Missing required parameter : start. Value : ' + start);
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'devices'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    limit: limit,
    start: start,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Allow to run live aggregation queries against an organisation's devices.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {array} parameters.devicesIds
 * List of id's of devices,
 * @param {array} parameters.aggregations
 * The aggregations names,
 * @param {array} [parameters.parameters]
 * The params to set,
 * @param {array} parameters.intervals
 * The intervals to retrieve,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {string} [parameters.date]
 * The status date,
 * @param {boolean} [parameters.patched]
 * Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationDevicesLiveAggregations(
  {
    organisationId,
    devicesIds,
    aggregations,
    parameters,
    intervals,
    timeZone,
    date,
    patched,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (devicesIds == null) {
    throw new Error(
      'Missing required parameter : devicesIds. Value : ' + devicesIds,
    );
  }

  if (aggregations == null) {
    throw new Error(
      'Missing required parameter : aggregations. Value : ' + aggregations,
    );
  }

  if (intervals == null) {
    throw new Error(
      'Missing required parameter : intervals. Value : ' + intervals,
    );
  }

  const method = 'get';
  let urlParts = [
    'organisations',
    organisationId,
    'devices',
    'liveAggregations',
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    devicesIds: devicesIds,
    aggregations: aggregations,
    parameters: parameters,
    intervals: intervals,
    timeZone: timeZone,
    date: date,
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a chargebee hosted page for an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.redirectUrl]
 * Specifies the callback url for chargebee hosted page,
 * @param {string} parameters.planId
 * Plan id related to chargebee plans,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationHostedPage(
  {
    organisationId,
    redirectUrl,
    planId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (planId == null) {
    throw new Error('Missing required parameter : planId. Value : ' + planId);
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'hostedPage'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    redirectUrl: redirectUrl,
    planId: planId,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's invitation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.invitationId
 * The invitation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationInvitation(
  {
    organisationId,
    invitationId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (invitationId == null) {
    throw new Error(
      'Missing required parameter : invitationId. Value : ' + invitationId,
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'invitations', invitationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get an organisation's invitations.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.limit
 * The number of items to retrieve,
 * @param {number} parameters.start
 * The index in results,
 * @param {array} [parameters.withTypes]
 * undefined,
 * @param {array} [parameters.withStatuses]
 * undefined,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationInvitations(
  {
    organisationId,
    limit,
    start,
    withTypes,
    withStatuses,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (limit == null) {
    throw new Error('Missing required parameter : limit. Value : ' + limit);
  }

  if (start == null) {
    throw new Error('Missing required parameter : start. Value : ' + start);
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'invitations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    limit: limit,
    start: start,
    withTypes: withTypes,
    withStatuses: withStatuses,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Retrieve all members from an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.memberId
 * The member id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationMember(
  { organisationId, memberId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (memberId == null) {
    throw new Error(
      'Missing required parameter : memberId. Value : ' + memberId,
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'members', memberId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Retrieve all members from an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationMembers(
  { organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'members'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get an organisation network.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.networkId
 * The network id,
 * @param {number} parameters.limit
 * The number of items to retrieve,
 * @param {number} parameters.start
 * The index in results,
 * @param {string} [parameters.geohash]
 * The geohash to lookup,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationNetworkDevices(
  {
    organisationId,
    networkId,
    limit,
    start,
    geohash,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (networkId == null) {
    throw new Error(
      'Missing required parameter : networkId. Value : ' + networkId,
    );
  }

  if (limit == null) {
    throw new Error('Missing required parameter : limit. Value : ' + limit);
  }

  if (start == null) {
    throw new Error('Missing required parameter : start. Value : ' + start);
  }

  const method = 'get';
  let urlParts = [
    'organisations',
    organisationId,
    'networks',
    networkId,
    'devices',
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    limit: limit,
    start: start,
    geohash: geohash,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get the networks an organisation has access to.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.limit
 * The number of items to retrieve,
 * @param {number} parameters.start
 * The index in results,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationNetworks(
  {
    organisationId,
    limit,
    start,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (limit == null) {
    throw new Error('Missing required parameter : limit. Value : ' + limit);
  }

  if (start == null) {
    throw new Error('Missing required parameter : start. Value : ' + start);
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'networks'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    limit: limit,
    start: start,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a specific place for a organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.placeId
 * The place id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationPlace(
  { organisationId, placeId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (placeId == null) {
    throw new Error('Missing required parameter : placeId. Value : ' + placeId);
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'place', placeId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get all places for an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationPlaces(
  { organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'places'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a new place for an organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationPlace(
  { body, organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'post';
  let urlParts = ['organisations', organisationId, 'places'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get an organisation's preferences.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationPreferences(
  { organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'preferences'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update a organisation's preferences.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisationPreferences(
  { body, organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'put';
  let urlParts = ['organisations', organisationId, 'preferences'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get an organisation's shares.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} parameters.shareId
 * The share id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationShare(
  { organisationId, shareId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (shareId == null) {
    throw new Error('Missing required parameter : shareId. Value : ' + shareId);
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'shares', shareId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get an organisation's shares.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.limit
 * The number of items to retrieve,
 * @param {number} parameters.start
 * The index in results,
 * @param {array} [parameters.withTypes]
 * undefined,
 * @param {boolean} [parameters.isTransmittable]
 * undefined,
 * @param {array} [parameters.withModes]
 * undefined,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationShares(
  {
    organisationId,
    limit,
    start,
    withTypes,
    isTransmittable,
    withModes,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (limit == null) {
    throw new Error('Missing required parameter : limit. Value : ' + limit);
  }

  if (start == null) {
    throw new Error('Missing required parameter : start. Value : ' + start);
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'shares'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    limit: limit,
    start: start,
    withTypes: withTypes,
    isTransmittable: isTransmittable,
    withModes: withModes,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get an organisation's trial operation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {boolean} [parameters.active]
 * If true, returns only active trial operations (not ended and not expired),
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getOrganisationsTrialOperations(
  { organisationId, active, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'get';
  let urlParts = ['organisations', organisationId, 'trialOperations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    active: active,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Retrieves the devices a partner has access to.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.partnerId
 * The partner organisation id,
 * @param {number} parameters.limit
 * The number of items to retrieve,
 * @param {number} parameters.start
 * The index in results,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getPartnerDevices(
  { partnerId, limit, start, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (partnerId == null) {
    throw new Error(
      'Missing required parameter : partnerId. Value : ' + partnerId,
    );
  }

  if (limit == null) {
    throw new Error('Missing required parameter : limit. Value : ' + limit);
  }

  if (start == null) {
    throw new Error('Missing required parameter : start. Value : ' + start);
  }

  const method = 'get';
  let urlParts = ['partners', partnerId, 'devices'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    limit: limit,
    start: start,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Checks API's availability.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getPing({ xAppVersion } = {}, options) {
  const method = 'get';
  let urlParts = ['ping'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get last measure (for a specific type) from devices in a given area .
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.topLeftBoxX
 * X coordinate of the top left corner of the map,
 * @param {number} parameters.topLeftBoxY
 * Y coordinate of the top left corner of the map,
 * @param {number} parameters.bottomRightBoxX
 * X coordinate of the bottom right corner of the map,
 * @param {number} parameters.bottomRightBoxY
 * Y coordinate of the bottom right corner of the map,
 * @param {string} parameters.measureType
 * The type of measure to retrieve,
 * @param {string} parameters.aggregationType
 * The type of aggregation,
 * @param {number} parameters.precision
 * The precision of the map,
 * @param {string} [parameters.timeFrame]
 * The aggregatable measure,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getPublicWeatherLive(
  {
    topLeftBoxX,
    topLeftBoxY,
    bottomRightBoxX,
    bottomRightBoxY,
    measureType,
    aggregationType,
    precision,
    timeFrame,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (topLeftBoxX == null) {
    throw new Error(
      'Missing required parameter : topLeftBoxX. Value : ' + topLeftBoxX,
    );
  }

  if (topLeftBoxY == null) {
    throw new Error(
      'Missing required parameter : topLeftBoxY. Value : ' + topLeftBoxY,
    );
  }

  if (bottomRightBoxX == null) {
    throw new Error(
      'Missing required parameter : bottomRightBoxX. Value : ' +
        bottomRightBoxX,
    );
  }

  if (bottomRightBoxY == null) {
    throw new Error(
      'Missing required parameter : bottomRightBoxY. Value : ' +
        bottomRightBoxY,
    );
  }

  if (measureType == null) {
    throw new Error(
      'Missing required parameter : measureType. Value : ' + measureType,
    );
  }

  if (aggregationType == null) {
    throw new Error(
      'Missing required parameter : aggregationType. Value : ' +
        aggregationType,
    );
  }

  if (precision == null) {
    throw new Error(
      'Missing required parameter : precision. Value : ' + precision,
    );
  }

  const method = 'get';
  let urlParts = ['weather', 'public', 'live'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    topLeftBoxX: topLeftBoxX,
    topLeftBoxY: topLeftBoxY,
    bottomRightBoxX: bottomRightBoxX,
    bottomRightBoxY: bottomRightBoxY,
    measureType: measureType,
    aggregationType: aggregationType,
    precision: precision,
    timeFrame: timeFrame,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get last measure (for a specifics measures and interval) from devices in a given area
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.geohash
 * The geohash to lookup,
 * @param {array} parameters.aggregations
 * The aggregations names,
 * @param {string} parameters.liveInterval
 * The interval to retrieve,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getPublicWeatherLiveAggregations(
  {
    geohash,
    aggregations,
    liveInterval,
    timeZone,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (geohash == null) {
    throw new Error('Missing required parameter : geohash. Value : ' + geohash);
  }

  if (aggregations == null) {
    throw new Error(
      'Missing required parameter : aggregations. Value : ' + aggregations,
    );
  }

  if (liveInterval == null) {
    throw new Error(
      'Missing required parameter : liveInterval. Value : ' + liveInterval,
    );
  }

  const method = 'get';
  let urlParts = ['weather', 'public', 'liveAggregations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    geohash: geohash,
    aggregations: aggregations,
    liveInterval: liveInterval,
    timeZone: timeZone,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a quote
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.quoteId
 * The quote id
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getQuote({ quoteId, xAppVersion } = {}, options) {
  if (quoteId == null) {
    throw new Error('Missing required parameter : quoteId. Value : ' + quoteId);
  }

  const method = 'get';
  let urlParts = ['quotes', quoteId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a chargebee hosted page for quote
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.quoteId
 * The quote id,
 * @param {string} [parameters.tva]
 * undefined,
 * @param {string} [parameters.paymentMethod]
 * undefined,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getQuoteHostedPage(
  {
    userId,
    quoteId,
    tva,
    paymentMethod,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (quoteId == null) {
    throw new Error('Missing required parameter : quoteId. Value : ' + quoteId);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'quotes', quoteId, 'hostedPage'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    tva: tva,
    paymentMethod: paymentMethod,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Search devices around a geopoint
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getSearchDevices({ latitude, longitude, xAppVersion } = {}, options) {
  if (latitude == null) {
    throw new Error(
      'Missing required parameter : latitude. Value : ' + latitude,
    );
  }

  if (longitude == null) {
    throw new Error(
      'Missing required parameter : longitude. Value : ' + longitude,
    );
  }

  const method = 'get';
  let urlParts = ['search', 'devices'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Search devices around a geopoint for a network
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data,
 * @param {string} parameters.networkId
 * The network id
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getSearchNetworkDevices(
  { latitude, longitude, networkId, xAppVersion } = {},
  options,
) {
  if (latitude == null) {
    throw new Error(
      'Missing required parameter : latitude. Value : ' + latitude,
    );
  }

  if (longitude == null) {
    throw new Error(
      'Missing required parameter : longitude. Value : ' + longitude,
    );
  }

  if (networkId == null) {
    throw new Error(
      'Missing required parameter : networkId. Value : ' + networkId,
    );
  }

  const method = 'get';
  let urlParts = ['search', 'networks', networkId, 'devices'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Search for an user
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.email
 * Email of the user to search,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getSearchUser(
  { email, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (email == null) {
    throw new Error('Missing required parameter : email. Value : ' + email);
  }

  const method = 'get';
  let urlParts = ['search', 'users'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    email: email,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a trial operation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.trialOperationId
 * The trial operation id
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getTrialOperation({ trialOperationId, xAppVersion } = {}, options) {
  if (trialOperationId == null) {
    throw new Error(
      'Missing required parameter : trialOperationId. Value : ' +
        trialOperationId,
    );
  }

  const method = 'get';
  let urlParts = ['trialOperations', trialOperationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's profile.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUser(
  { userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update a user's profile.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUser(
  { body, userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'put';
  let urlParts = ['users', userId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a single user aggregation with statistics for graphs
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.aggregationId
 * The aggregation id,
 * @param {boolean} [parameters.patched]
 * Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserAggregation(
  {
    userId,
    aggregationId,
    patched,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (aggregationId == null) {
    throw new Error(
      'Missing required parameter : aggregationId. Value : ' + aggregationId,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'aggregations', aggregationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's aggregations.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {boolean} [parameters.compute]
 * Wether the aggregations should be computed,
 * @param {boolean} [parameters.patched]
 * Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserAggregations(
  { userId, compute, patched, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'aggregations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    compute: compute,
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's alerts.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserAlerts(
  { userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'alerts'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's daily data for a given geo location.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {array} [parameters.ranges]
 * The ranges to get the data from,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} [parameters.withCalibration]
 * Wether the calibration of rain falls must be taken in count,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {boolean} [parameters.patched]
 * Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDailyData(
  {
    userId,
    latitude,
    longitude,
    beforeDate,
    days,
    includeHistory,
    ranges,
    measures,
    withCalibration,
    timeZone,
    patched,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (latitude == null) {
    throw new Error(
      'Missing required parameter : latitude. Value : ' + latitude,
    );
  }

  if (longitude == null) {
    throw new Error(
      'Missing required parameter : longitude. Value : ' + longitude,
    );
  }

  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate,
    );
  }

  if (days == null) {
    throw new Error('Missing required parameter : days. Value : ' + days);
  }

  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'data', 'daily'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
    beforeDate: beforeDate,
    days: days,
    includeHistory: includeHistory,
    ranges: ranges,
    measures: measures,
    withCalibration: withCalibration,
    timeZone: timeZone,
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDevice(
  {
    userId,
    deviceId,
    includeHistory,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    includeHistory: includeHistory,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device's continuous device's statistics.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.startDate
 * The statistics start date,
 * @param {string} parameters.endDate
 * The statistics end date,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} [parameters.patched]
 * Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {string} [parameters.interval]
 * The interval of data (Accepted value : 31 days for 1h interval, 1 year for 1d interval, 5y for 1w interval),
 * @param {boolean} [parameters.withCalibration]
 * Wether the calibration of rain falls must be taken in count,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceContinuousStatistics(
  {
    userId,
    deviceId,
    startDate,
    endDate,
    measures,
    patched,
    includeHistory,
    timeZone,
    interval,
    withCalibration,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  if (startDate == null) {
    throw new Error(
      'Missing required parameter : startDate. Value : ' + startDate,
    );
  }

  if (endDate == null) {
    throw new Error('Missing required parameter : endDate. Value : ' + endDate);
  }

  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = [
    'users',
    userId,
    'devices',
    deviceId,
    'countinuousStatistics',
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    startDate: startDate,
    endDate: endDate,
    measures: measures,
    patched: patched,
    includeHistory: includeHistory,
    timeZone: timeZone,
    interval: interval,
    withCalibration: withCalibration,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device's daily data.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} [parameters.withCalibration]
 * Wether the calibration of rain falls must be taken in count,
 * @param {boolean} [parameters.patched]
 * Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceDailyData(
  {
    userId,
    deviceId,
    beforeDate,
    days,
    includeHistory,
    timeZone,
    measures,
    withCalibration,
    patched,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate,
    );
  }

  if (days == null) {
    throw new Error('Missing required parameter : days. Value : ' + days);
  }

  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'data', 'daily'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    beforeDate: beforeDate,
    days: days,
    includeHistory: includeHistory,
    timeZone: timeZone,
    measures: measures,
    withCalibration: withCalibration,
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device's forecasts.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.date
 * Date of the forecasts,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceForecasts(
  { userId, deviceId, date, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  if (date == null) {
    throw new Error('Missing required parameter : date. Value : ' + date);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'forecasts'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    date: date,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device's hourly data.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} [parameters.withCalibration]
 * Wether the calibration of rain falls must be taken in count,
 * @param {boolean} [parameters.patched]
 * Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceHourlyData(
  {
    userId,
    deviceId,
    beforeDate,
    includeHistory,
    timeZone,
    days,
    measures,
    withCalibration,
    patched,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate,
    );
  }

  if (days == null) {
    throw new Error('Missing required parameter : days. Value : ' + days);
  }

  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'data', 'hourly'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    beforeDate: beforeDate,
    includeHistory: includeHistory,
    timeZone: timeZone,
    days: days,
    measures: measures,
    withCalibration: withCalibration,
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get the modules a user activated on its device
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceModules(
  { userId, deviceId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'modules'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device geographic positions historic.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDevicePositions(
  {
    userId,
    deviceId,
    includeHistory,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'positions'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    includeHistory: includeHistory,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device's raw data.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {number} parameters.size
 * The number of measures to retrieve,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceRawData(
  {
    userId,
    deviceId,
    beforeDate,
    includeHistory,
    size,
    measures,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate,
    );
  }

  if (size == null) {
    throw new Error('Missing required parameter : size. Value : ' + size);
  }

  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'data', 'raw'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    beforeDate: beforeDate,
    includeHistory: includeHistory,
    size: size,
    measures: measures,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device's device's statistics.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.startDate
 * The statistics start date,
 * @param {string} parameters.endDate
 * The statistics end date,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} [parameters.patched]
 * Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {string} [parameters.interval]
 * The interval of data (Accepted value : 31 days for 1h interval, 1 year for 1d interval, 5y for 1w interval),
 * @param {boolean} [parameters.withCalibration]
 * Wether the calibration of rain falls must be taken in count,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceStatistics(
  {
    userId,
    deviceId,
    startDate,
    endDate,
    measures,
    patched,
    includeHistory,
    timeZone,
    interval,
    withCalibration,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  if (startDate == null) {
    throw new Error(
      'Missing required parameter : startDate. Value : ' + startDate,
    );
  }

  if (endDate == null) {
    throw new Error('Missing required parameter : endDate. Value : ' + endDate);
  }

  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'statistics'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    startDate: startDate,
    endDate: endDate,
    measures: measures,
    patched: patched,
    includeHistory: includeHistory,
    timeZone: timeZone,
    interval: interval,
    withCalibration: withCalibration,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's device's summary at a given date.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} parameters.date
 * The summary date,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDeviceSummary(
  {
    userId,
    deviceId,
    includeHistory,
    date,
    measures,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  if (date == null) {
    throw new Error('Missing required parameter : date. Value : ' + date);
  }

  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', deviceId, 'summaries', date];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    includeHistory: includeHistory,
    measures: measures,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's devices.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.date]
 * The status date,
 * @param {array} [parameters.measures]
 * The measures to read,
 * @param {boolean} [parameters.patched]
 * Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.,
 * @param {number} [parameters.limit]
 * The number of items to retrieve,
 * @param {number} [parameters.start]
 * The index in results,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDevices(
  {
    userId,
    includeHistory,
    date,
    measures,
    patched,
    limit,
    start,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    includeHistory: includeHistory,
    date: date,
    measures: measures,
    patched: patched,
    limit: limit,
    start: start,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Allow to run live aggregation queries against a user devices.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {array} parameters.devicesIds
 * List of id's of devices,
 * @param {array} parameters.aggregations
 * The aggregations names,
 * @param {array} [parameters.parameters]
 * The params to set,
 * @param {array} parameters.intervals
 * The intervals to retrieve,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {string} [parameters.date]
 * The status date,
 * @param {boolean} [parameters.patched]
 * Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserDevicesLiveAggregations(
  {
    userId,
    devicesIds,
    aggregations,
    parameters,
    intervals,
    timeZone,
    date,
    patched,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (devicesIds == null) {
    throw new Error(
      'Missing required parameter : devicesIds. Value : ' + devicesIds,
    );
  }

  if (aggregations == null) {
    throw new Error(
      'Missing required parameter : aggregations. Value : ' + aggregations,
    );
  }

  if (intervals == null) {
    throw new Error(
      'Missing required parameter : intervals. Value : ' + intervals,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'devices', 'liveAggregations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    devicesIds: devicesIds,
    aggregations: aggregations,
    parameters: parameters,
    intervals: intervals,
    timeZone: timeZone,
    date: date,
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's forecasts.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data,
 * @param {string} [parameters.date]
 * Date of the forecasts,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserForecasts(
  {
    userId,
    latitude,
    longitude,
    date,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (latitude == null) {
    throw new Error(
      'Missing required parameter : latitude. Value : ' + latitude,
    );
  }

  if (longitude == null) {
    throw new Error(
      'Missing required parameter : longitude. Value : ' + longitude,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'forecasts'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
    date: date,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's hourly data for a given geo location.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data,
 * @param {string} parameters.beforeDate
 * The date before which the data starts being retrieved,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {number} parameters.days
 * The number of days to retrieve,
 * @param {array} [parameters.ranges]
 * The ranges to get the data from,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {boolean} [parameters.withCalibration]
 * Wether the calibration of rain falls must be taken in count,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {boolean} [parameters.patched]
 * Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserHourlyData(
  {
    userId,
    latitude,
    longitude,
    beforeDate,
    includeHistory,
    days,
    ranges,
    measures,
    withCalibration,
    timeZone,
    patched,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (latitude == null) {
    throw new Error(
      'Missing required parameter : latitude. Value : ' + latitude,
    );
  }

  if (longitude == null) {
    throw new Error(
      'Missing required parameter : longitude. Value : ' + longitude,
    );
  }

  if (beforeDate == null) {
    throw new Error(
      'Missing required parameter : beforeDate. Value : ' + beforeDate,
    );
  }

  if (days == null) {
    throw new Error('Missing required parameter : days. Value : ' + days);
  }

  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'data', 'hourly'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
    beforeDate: beforeDate,
    includeHistory: includeHistory,
    days: days,
    ranges: ranges,
    measures: measures,
    withCalibration: withCalibration,
    timeZone: timeZone,
    patched: patched,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * HMAC Digest for the userId, used for the identity verification of intercom
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.platform
 * Type of the platform,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserIntercomHash(
  { userId, platform, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (platform == null) {
    throw new Error(
      'Missing required parameter : platform. Value : ' + platform,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'intercomHash'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    platform: platform,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's invitation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.invitationId
 * The invitation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserInvitation(
  { userId, invitationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (invitationId == null) {
    throw new Error(
      'Missing required parameter : invitationId. Value : ' + invitationId,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'invitations', invitationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's invitations.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.limit
 * The number of items to retrieve,
 * @param {number} parameters.start
 * The index in results,
 * @param {array} [parameters.withTypes]
 * undefined,
 * @param {array} [parameters.withStatuses]
 * undefined,
 * @param {array} [parameters.withModes]
 * undefined,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserInvitations(
  {
    userId,
    limit,
    start,
    withTypes,
    withStatuses,
    withModes,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (limit == null) {
    throw new Error('Missing required parameter : limit. Value : ' + limit);
  }

  if (start == null) {
    throw new Error('Missing required parameter : start. Value : ' + start);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'invitations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    limit: limit,
    start: start,
    withTypes: withTypes,
    withStatuses: withStatuses,
    withModes: withModes,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get all user's organisations.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserOrganisations(
  { userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'organisations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Creates a new organisation for a user (add him as owner).
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserOrganisation(
  { body, userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'post';
  let urlParts = ['users', userId, 'organisations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's pending invitation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.invitationId
 * The invitation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserPendingInvitation(
  { userId, invitationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (invitationId == null) {
    throw new Error(
      'Missing required parameter : invitationId. Value : ' + invitationId,
    );
  }

  const method = 'get';
  let urlParts = ['users', userId, 'pendingInvitations', invitationId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's pending invitations.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.limit
 * The number of items to retrieve,
 * @param {number} parameters.start
 * The index in results,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserPendingInvitations(
  { userId, limit, start, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (limit == null) {
    throw new Error('Missing required parameter : limit. Value : ' + limit);
  }

  if (start == null) {
    throw new Error('Missing required parameter : start. Value : ' + start);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'pendingInvitations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    limit: limit,
    start: start,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get an user's preferences.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserPreferences(
  { userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'preferences'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update a user's preferences.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserPreferences(
  { body, userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'put';
  let urlParts = ['users', userId, 'preferences'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a user's statistics for a given location.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.latitude
 * The latitude of the data,
 * @param {number} parameters.longitude
 * The longitude of the data,
 * @param {string} parameters.startDate
 * The statistics start date,
 * @param {string} parameters.endDate
 * The statistics end date,
 * @param {array} parameters.measures
 * The measures to read,
 * @param {array} parameters.ranges
 * The ranges to get the data from,
 * @param {boolean} [parameters.patched]
 * Patched data are augmented data with internal algorithms. Setting patched to false, will return raw data from device only.,
 * @param {boolean} [parameters.includeHistory]
 * If must include device replacements or not,
 * @param {string} [parameters.interval]
 * The interval of data (Accepted value : 31 days for 1h interval, 1 year for 1d interval, 5y for 1w interval),
 * @param {boolean} [parameters.withCalibration]
 * Wether the calibration of rain falls must be taken in count,
 * @param {string} [parameters.timeZone]
 * The timezone of the data,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getUserStatistics(
  {
    userId,
    latitude,
    longitude,
    startDate,
    endDate,
    measures,
    ranges,
    patched,
    includeHistory,
    interval,
    withCalibration,
    timeZone,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (latitude == null) {
    throw new Error(
      'Missing required parameter : latitude. Value : ' + latitude,
    );
  }

  if (longitude == null) {
    throw new Error(
      'Missing required parameter : longitude. Value : ' + longitude,
    );
  }

  if (startDate == null) {
    throw new Error(
      'Missing required parameter : startDate. Value : ' + startDate,
    );
  }

  if (endDate == null) {
    throw new Error('Missing required parameter : endDate. Value : ' + endDate);
  }

  if (measures == null) {
    throw new Error(
      'Missing required parameter : measures. Value : ' + measures,
    );
  }

  if (ranges == null) {
    throw new Error('Missing required parameter : ranges. Value : ' + ranges);
  }

  const method = 'get';
  let urlParts = ['users', userId, 'statistics'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    latitude: latitude,
    longitude: longitude,
    startDate: startDate,
    endDate: endDate,
    measures: measures,
    ranges: ranges,
    patched: patched,
    includeHistory: includeHistory,
    interval: interval,
    withCalibration: withCalibration,
    timeZone: timeZone,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get last measure (for a specific type) from devices in a given area (1 hour for RAIN_FALL).
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.geohash
 * The geohash to lookup,
 * @param {string} parameters.measureType
 * The measures to read,
 * @param {string} [parameters.timeFrame]
 * The aggregatable measure,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getWeatherLive(
  {
    geohash,
    measureType,
    timeFrame,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (geohash == null) {
    throw new Error('Missing required parameter : geohash. Value : ' + geohash);
  }

  if (measureType == null) {
    throw new Error(
      'Missing required parameter : measureType. Value : ' + measureType,
    );
  }

  const method = 'get';
  let urlParts = ['weather', 'live'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    geohash: geohash,
    measureType: measureType,
    timeFrame: timeFrame,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Resend the invitation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.invitationId
 * The invitation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postInvitationResend(
  { invitationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (invitationId == null) {
    throw new Error(
      'Missing required parameter : invitationId. Value : ' + invitationId,
    );
  }

  const method = 'post';
  let urlParts = ['invitations', invitationId, 'resend'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Log a user in
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postLogin({ body, xAppVersion } = {}, options) {
  const method = 'post';
  let urlParts = ['users', 'sign_in'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Request a password change e-mail.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postLostPassword({ body, xAppVersion } = {}, options) {
  const method = 'post';
  let urlParts = ['password', 'lost'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Implements the [Token Endpoint](https://tools.ietf.org/html/rfc6749#section-3.2)
 as defined per the OAuth2 RFC.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} [parameters.authorization]
 * Authorization with Basic mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOAuth2Token({ body, authorization, xAppVersion } = {}, options) {
  const method = 'post';
  let urlParts = ['oauth2', 'token'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Creates a new organisation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisation(
  { body, authorization, accessToken, xAppVersion } = {},
  options,
) {
  const method = 'post';
  let urlParts = ['organisations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Remove the trial of an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationEndTrialSupport(
  { organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'post';
  let urlParts = ['support', 'organisations', organisationId, 'endTrial'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Add a plan to a organisation of a sponsored network
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.networkMemberId
 * The organisation id of the network member,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationNetworkMemberPlan(
  {
    body,
    organisationId,
    networkMemberId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (networkMemberId == null) {
    throw new Error(
      'Missing required parameter : networkMemberId. Value : ' +
        networkMemberId,
    );
  }

  const method = 'post';
  let urlParts = [
    'organisations',
    organisationId,
    'networkMembers',
    networkMemberId,
    'plan',
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Complete the payment flow of an organisation, if chargebee hook is delayed
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationPaymentComplete(
  { body, organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'post';
  let urlParts = ['organisations', organisationId, 'paymentComplete'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Convert an organisation to a network
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationToNetworkSupport(
  { body, organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'post';
  let urlParts = ['support', 'organisations', organisationId, 'toNetwork'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Reactivate a trial organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postOrganisationTrialReactivation(
  { organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'post';
  let urlParts = ['organisations', organisationId, 'trialReactivation'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a user token (deprecated, use OAuth2)
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.partnerId
 * The partner organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Basic mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postPartnerToken(
  { body, partnerId, authorization, xAppVersion } = {},
  options,
) {
  if (partnerId == null) {
    throw new Error(
      'Missing required parameter : partnerId. Value : ' + partnerId,
    );
  }

  const method = 'post';
  let urlParts = ['partners', partnerId, 'tokens'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Request a user token
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.partnerId
 * The partner organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Basic mecanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postPartnerTokenRequest(
  { body, partnerId, authorization, xAppVersion } = {},
  options,
) {
  if (partnerId == null) {
    throw new Error(
      'Missing required parameter : partnerId. Value : ' + partnerId,
    );
  }

  const method = 'post';
  let urlParts = ['partners', partnerId, 'tokenRequests'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Set offline mode for a quote
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.quoteId
 * The quote id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postQuoteOffline(
  { userId, quoteId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (quoteId == null) {
    throw new Error('Missing required parameter : quoteId. Value : ' + quoteId);
  }

  const method = 'post';
  let urlParts = ['users', userId, 'quotes', quoteId, 'offline'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Register a new user and his organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {boolean} [parameters.noTrial]
 * Deprecated, not used anymore,
 * @param {string} [parameters.trialOperationId]
 * Operation trial id used to compute trialEndDate of organisation,
 * @param {string} [parameters.referralId]
 * UUID of the godfather organisation (through a referral program)
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postRegister(
  { body, noTrial, trialOperationId, referralId, xAppVersion } = {},
  options,
) {
  const method = 'post';
  let urlParts = ['register'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    noTrial: noTrial,
    trialOperationId: trialOperationId,
    referralId: referralId,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Get a cloudinary signature to make a signed upload
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postSignatureCloudinary(
  { body, authorization, accessToken, xAppVersion } = {},
  options,
) {
  const method = 'post';
  let urlParts = ['cloudinary', 'signature'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Hit the server to check the email can be used to signup.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} [parameters.authorization]
 * Authorization with Bearer mechanism
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postSignupCheck({ body, authorization, xAppVersion } = {}, options) {
  const method = 'post';
  let urlParts = ['utils', 'checkSignup'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Generate a new image to share it on social media
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postSocialImage(
  { body, authorization, accessToken, xAppVersion } = {},
  options,
) {
  const method = 'post';
  let urlParts = ['socialImage'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a new user.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUser({ body, xAppVersion } = {}, options) {
  const method = 'post';
  let urlParts = ['users'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a new export job
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} [parameters.emailRecipient]
 * Recipient email of the export (override default user email),
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserDeviceExport(
  {
    body,
    userId,
    deviceId,
    emailRecipient,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'post';
  let urlParts = ['users', userId, 'devices', deviceId, 'export'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    emailRecipient: emailRecipient,
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Invite a user to reach the Network page
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.networkId
 * The network id,
 * @param {string} [parameters.trialOperationId]
 * Operation trial id used to compute trialEndDate of organisation
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserNetworkInvitation(
  { body, userId, networkId, trialOperationId, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (networkId == null) {
    throw new Error(
      'Missing required parameter : networkId. Value : ' + networkId,
    );
  }

  const method = 'post';
  let urlParts = ['users', userId, 'networks', networkId, 'invitations'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    trialOperationId: trialOperationId,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a new organisation's aggregation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserOrganisationAggregation(
  {
    body,
    userId,
    organisationId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'post';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'aggregations',
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create a new organisation's alert.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserOrganisationAlert(
  {
    body,
    userId,
    organisationId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'post';
  let urlParts = ['users', userId, 'organisations', organisationId, 'alerts'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Setup a organisation's device.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserOrganisationDevice(
  {
    body,
    organisationId,
    userId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'post';
  let urlParts = ['users', userId, 'organisations', organisationId, 'devices'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Create an organisation's invitation.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserOrganisationInvitation(
  {
    body,
    userId,
    organisationId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'post';
  let urlParts = [
    'users',
    userId,
    'organisations',
    organisationId,
    'invitations',
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Add an member to an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserOrganisationMember(
  {
    body,
    userId,
    organisationId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'post';
  let urlParts = ['users', userId, 'organisations', organisationId, 'members'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update user password
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postUserPassword({ body, userId, xAppVersion } = {}, options) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'post';
  let urlParts = ['users', userId, 'password'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Verify a user
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postVerify({ body, xAppVersion } = {}, options) {
  const method = 'post';
  let urlParts = ['users', 'verify'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update an organisation's device calibration.
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} parameters.calibrationName
 * Calibration to set,
 * @param {number} parameters.ratio
 * Ratio to set,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisationDeviceCalibration(
  {
    organisationId,
    deviceId,
    calibrationName,
    ratio,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  if (calibrationName == null) {
    throw new Error(
      'Missing required parameter : calibrationName. Value : ' +
        calibrationName,
    );
  }

  if (ratio == null) {
    throw new Error('Missing required parameter : ratio. Value : ' + ratio);
  }

  const method = 'put';
  let urlParts = [
    'organisations',
    organisationId,
    'devices',
    deviceId,
    'calibration',
    calibrationName,
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    ratio: ratio,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update an organisation's device's settings.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisationDeviceSettings(
  {
    body,
    organisationId,
    deviceId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  const method = 'put';
  let urlParts = [
    'organisations',
    organisationId,
    'devices',
    deviceId,
    'settings',
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update a place for an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {number} parameters.placeId
 * The place id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisationPlace(
  {
    body,
    organisationId,
    placeId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  if (placeId == null) {
    throw new Error('Missing required parameter : placeId. Value : ' + placeId);
  }

  const method = 'put';
  let urlParts = ['organisations', organisationId, 'places', placeId];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Change trial for an organisation
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.organisationId
 * The organisation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putOrganisationTrial(
  { body, organisationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (organisationId == null) {
    throw new Error(
      'Missing required parameter : organisationId. Value : ' + organisationId,
    );
  }

  const method = 'put';
  let urlParts = ['organisations', organisationId, 'trial'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update an partner module parameters
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.partnerId
 * The partner organisation id,
 * @param {number} parameters.partnerUserId
 * The partner user id,
 * @param {number} parameters.deviceId
 * The device id,
 * @param {number} parameters.moduleId
 * The module id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putPartnerModuleParameters(
  {
    body,
    partnerId,
    partnerUserId,
    deviceId,
    moduleId,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (partnerId == null) {
    throw new Error(
      'Missing required parameter : partnerId. Value : ' + partnerId,
    );
  }

  if (partnerUserId == null) {
    throw new Error(
      'Missing required parameter : partnerUserId. Value : ' + partnerUserId,
    );
  }

  if (deviceId == null) {
    throw new Error(
      'Missing required parameter : deviceId. Value : ' + deviceId,
    );
  }

  if (moduleId == null) {
    throw new Error(
      'Missing required parameter : moduleId. Value : ' + moduleId,
    );
  }

  const method = 'put';
  let urlParts = [
    'partners',
    partnerId,
    'users',
    partnerUserId,
    'devices',
    deviceId,
    'modules',
    moduleId,
    'parameters',
  ];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Change a user password
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putPassword({ body, xAppVersion } = {}, options) {
  const method = 'put';
  let urlParts = ['password'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({});
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Update Firebase Cloud Messaging token for an user
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserFCMToken(
  { body, userId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  const method = 'put';
  let urlParts = ['users', userId, 'FCMToken'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Set a user's invitation answer.
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {number} parameters.userId
 * The user id,
 * @param {string} parameters.invitationId
 * The invitation id,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function putUserInvitationAnswer(
  { body, userId, invitationId, authorization, accessToken, xAppVersion } = {},
  options,
) {
  if (userId == null) {
    throw new Error('Missing required parameter : userId. Value : ' + userId);
  }

  if (invitationId == null) {
    throw new Error(
      'Missing required parameter : invitationId. Value : ' + invitationId,
    );
  }

  const method = 'put';
  let urlParts = ['users', userId, 'invitations', invitationId, 'answer'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Graphql endpoint
 * @param {Object} parameters
 * The parameters to provide (destructured)
 * @param {string} parameters.query
 * The GraphQL query,
 * @param {string} [parameters.variables]
 * The GraphQL variables,
 * @param {string} [parameters.operationName]
 * The GraphQL operation name,
 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function getGraphQL(
  {
    query,
    variables,
    operationName,
    authorization,
    accessToken,
    xAppVersion,
  } = {},
  options,
) {
  if (query == null) {
    throw new Error('Missing required parameter : query. Value : ' + query);
  }

  const method = 'get';
  let urlParts = ['graphql'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    query: query,
    variables: variables,
    operationName: operationName,
    access_token: accessToken,
  });
  let data = {}.undef;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

/**
 * Graphql endpoint
 * @param {Object} parameters
 * The parameters to provide (destructured)
  @param body The request body

 * @param {string} [parameters.authorization]
 * Authorization with Bearer mecanism,
 * @param {string} [parameters.accessToken]
 * Token provided through query parameters
 * @param {Object} options
 * Options to override Axios request configuration
 * @return {Object}
 * The HTTP response
 */
function postGraphQL(
  { body, authorization, accessToken, xAppVersion } = {},
  options,
) {
  const method = 'post';
  let urlParts = ['graphql'];
  let headers = Object.assign((options || {}).headers || {}, {
    'X-API-Version': '1.60.4',
    'X-SDK-Version': '2.18.0',
    Authorization: authorization,
    'X-APP-Version': xAppVersion,
  });
  let qs = cleanQuery({
    access_token: accessToken,
  });
  let data = body;

  return axios(
    Object.assign(
      {
        baseURL: 'https://api.sencrop.com/v1',
        paramsSerializer: querystring.stringify.bind(querystring),
        validateStatus: status => 200 <= status && 300 > status,
        method: method,
        url: urlParts.join('/'),
        headers: cleanHeaders(headers),
        params: qs,
        data,
      },
      options || {},
    ),
  );
}

function cleanQuery(query) {
  return Object.keys(query)
    .filter(key => 'undefined' !== typeof query[key])
    .filter(key => !(query[key] instanceof Array) || 0 !== query[key].length)
    .reduce((newQuery, key) => {
      newQuery[key] = query[key];
      return newQuery;
    }, {});
}

function cleanHeaders(headers) {
  return Object.keys(headers)
    .filter(key => 'undefined' !== typeof headers[key])
    .reduce((newHeaders, key) => {
      newHeaders[key] = headers[key];
      return newHeaders;
    }, {});
}

// eslint-disable-next-line no-unused-vars
function sortMultipleQuery(a, b) {
  return a > b ? 1 : -1;
}

module.exports = API;
